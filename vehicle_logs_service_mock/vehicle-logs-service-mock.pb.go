// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.3
// source: vehicle-logs-service-mock.proto

package vehicle_logs_service_mock

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessageType int32

const (
	MessageType_GPS_LOG_MESSAGE                              MessageType = 0  // represents GPSLogMessage messages
	MessageType_IGNITION_LOG_MESSAGE                         MessageType = 1  // represents IgnitionLogMessage messages
	MessageType_APPLICATION_RUNTIME_ERROR_LOG_MESSAGE        MessageType = 2  // represents ApplicationRuntimeErrorLogMessage messages
	MessageType_APPLICATION_NOT_RESPONDING_ERROR_LOG_MESSAGE MessageType = 3  // represents ApplicationNotRespondingErrorLogMessage messages
	MessageType_SYSTEM_RESET_LOG_MESSAGE                     MessageType = 4  // represents SystemResetLogMessage messages
	MessageType_SYSTEM_USAGE_LOG_MESSAGE                     MessageType = 5  // represents SystemUsageLogMessage messages
	MessageType_WIFI_LOG_MESSAGE                             MessageType = 6  // represents WifiLogMessage messages
	MessageType_BLUETOOTH_LOG_MESSAGE                        MessageType = 7  // represents BluetoothLogMessage messages
	MessageType_PHONE_LOG_MESSAGE                            MessageType = 8  // represents PhoneLogMessage messages
	MessageType_MUSIC_LOG_MESSAGE                            MessageType = 9  // represents MusicLogMessage messages
	MessageType_CPAA_LOG_MESSAGE                             MessageType = 10 // represents CPAALogMessage messages
	MessageType_APPLICATION_USAGE_LOG_MESSAGE                MessageType = 11 // represents ApplicationUsageLogMessage messages
	MessageType_HMI_KEY_TRACE_LOG_MESSAGE                    MessageType = 12 // represents HMI key trace settings; only used for settings
	MessageType_SIRIUS_XM_LOG_MESSAGE                        MessageType = 13 // represents log settings for Sirius XM (this uses its own log // mechanism, rather than this service)
	MessageType_NAVIGATION_LOG_MESSAGE                       MessageType = 14 // represents NavigationLogMessage messages
	MessageType_IP_APP_LOG_MESSAGE                           MessageType = 15 // represents IpAppLogMessage messages
	MessageType_SMARTPHONE_INFORMATION_LOG_MESSAGE           MessageType = 16 // represents SmartphoneInformationLogMessage messages
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "GPS_LOG_MESSAGE",
		1:  "IGNITION_LOG_MESSAGE",
		2:  "APPLICATION_RUNTIME_ERROR_LOG_MESSAGE",
		3:  "APPLICATION_NOT_RESPONDING_ERROR_LOG_MESSAGE",
		4:  "SYSTEM_RESET_LOG_MESSAGE",
		5:  "SYSTEM_USAGE_LOG_MESSAGE",
		6:  "WIFI_LOG_MESSAGE",
		7:  "BLUETOOTH_LOG_MESSAGE",
		8:  "PHONE_LOG_MESSAGE",
		9:  "MUSIC_LOG_MESSAGE",
		10: "CPAA_LOG_MESSAGE",
		11: "APPLICATION_USAGE_LOG_MESSAGE",
		12: "HMI_KEY_TRACE_LOG_MESSAGE",
		13: "SIRIUS_XM_LOG_MESSAGE",
		14: "NAVIGATION_LOG_MESSAGE",
		15: "IP_APP_LOG_MESSAGE",
		16: "SMARTPHONE_INFORMATION_LOG_MESSAGE",
	}
	MessageType_value = map[string]int32{
		"GPS_LOG_MESSAGE":                              0,
		"IGNITION_LOG_MESSAGE":                         1,
		"APPLICATION_RUNTIME_ERROR_LOG_MESSAGE":        2,
		"APPLICATION_NOT_RESPONDING_ERROR_LOG_MESSAGE": 3,
		"SYSTEM_RESET_LOG_MESSAGE":                     4,
		"SYSTEM_USAGE_LOG_MESSAGE":                     5,
		"WIFI_LOG_MESSAGE":                             6,
		"BLUETOOTH_LOG_MESSAGE":                        7,
		"PHONE_LOG_MESSAGE":                            8,
		"MUSIC_LOG_MESSAGE":                            9,
		"CPAA_LOG_MESSAGE":                             10,
		"APPLICATION_USAGE_LOG_MESSAGE":                11,
		"HMI_KEY_TRACE_LOG_MESSAGE":                    12,
		"SIRIUS_XM_LOG_MESSAGE":                        13,
		"NAVIGATION_LOG_MESSAGE":                       14,
		"IP_APP_LOG_MESSAGE":                           15,
		"SMARTPHONE_INFORMATION_LOG_MESSAGE":           16,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{0}
}

type LogMessage_Severity int32

const (
	LogMessage_INFO     LogMessage_Severity = 0 // General info, no action required
	LogMessage_DEBUG    LogMessage_Severity = 1 // Useful during development
	LogMessage_WARN     LogMessage_Severity = 2 // Not an immediate problem, but indicates potential future problem
	LogMessage_ERROR    LogMessage_Severity = 3 // Event that impacted an application
	LogMessage_CRITICAL LogMessage_Severity = 4 // Event that needs immediate attention
)

// Enum value maps for LogMessage_Severity.
var (
	LogMessage_Severity_name = map[int32]string{
		0: "INFO",
		1: "DEBUG",
		2: "WARN",
		3: "ERROR",
		4: "CRITICAL",
	}
	LogMessage_Severity_value = map[string]int32{
		"INFO":     0,
		"DEBUG":    1,
		"WARN":     2,
		"ERROR":    3,
		"CRITICAL": 4,
	}
)

func (x LogMessage_Severity) Enum() *LogMessage_Severity {
	p := new(LogMessage_Severity)
	*p = x
	return p
}

func (x LogMessage_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogMessage_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[1].Descriptor()
}

func (LogMessage_Severity) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[1]
}

func (x LogMessage_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogMessage_Severity.Descriptor instead.
func (LogMessage_Severity) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{0, 0}
}

type GPSLogMessage_EventType int32

const (
	GPSLogMessage_LOCK_ACQUIRED GPSLogMessage_EventType = 0 // status indicating that a GPS position lock has been acquired
	GPSLogMessage_LOCK_LOST     GPSLogMessage_EventType = 1 // status indicating that a GPS position lock has been lost
)

// Enum value maps for GPSLogMessage_EventType.
var (
	GPSLogMessage_EventType_name = map[int32]string{
		0: "LOCK_ACQUIRED",
		1: "LOCK_LOST",
	}
	GPSLogMessage_EventType_value = map[string]int32{
		"LOCK_ACQUIRED": 0,
		"LOCK_LOST":     1,
	}
)

func (x GPSLogMessage_EventType) Enum() *GPSLogMessage_EventType {
	p := new(GPSLogMessage_EventType)
	*p = x
	return p
}

func (x GPSLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPSLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[2].Descriptor()
}

func (GPSLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[2]
}

func (x GPSLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPSLogMessage_EventType.Descriptor instead.
func (GPSLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{1, 0}
}

type IgnitionLogMessage_EventType int32

const (
	IgnitionLogMessage_ACC_ON      IgnitionLogMessage_EventType = 0
	IgnitionLogMessage_ACC_OFF     IgnitionLogMessage_EventType = 1
	IgnitionLogMessage_IG_ON       IgnitionLogMessage_EventType = 2
	IgnitionLogMessage_IG_OFF      IgnitionLogMessage_EventType = 3
	IgnitionLogMessage_DOOR_OPEN   IgnitionLogMessage_EventType = 4
	IgnitionLogMessage_DOOR_CLOSED IgnitionLogMessage_EventType = 5
)

// Enum value maps for IgnitionLogMessage_EventType.
var (
	IgnitionLogMessage_EventType_name = map[int32]string{
		0: "ACC_ON",
		1: "ACC_OFF",
		2: "IG_ON",
		3: "IG_OFF",
		4: "DOOR_OPEN",
		5: "DOOR_CLOSED",
	}
	IgnitionLogMessage_EventType_value = map[string]int32{
		"ACC_ON":      0,
		"ACC_OFF":     1,
		"IG_ON":       2,
		"IG_OFF":      3,
		"DOOR_OPEN":   4,
		"DOOR_CLOSED": 5,
	}
)

func (x IgnitionLogMessage_EventType) Enum() *IgnitionLogMessage_EventType {
	p := new(IgnitionLogMessage_EventType)
	*p = x
	return p
}

func (x IgnitionLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IgnitionLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[3].Descriptor()
}

func (IgnitionLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[3]
}

func (x IgnitionLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IgnitionLogMessage_EventType.Descriptor instead.
func (IgnitionLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{2, 0}
}

type ApplicationRuntimeErrorLogMessage_EventType int32

const (
	ApplicationRuntimeErrorLogMessage_RUNTIME_ERROR ApplicationRuntimeErrorLogMessage_EventType = 0 // The application has crashed or was killed by the hypervisor
)

// Enum value maps for ApplicationRuntimeErrorLogMessage_EventType.
var (
	ApplicationRuntimeErrorLogMessage_EventType_name = map[int32]string{
		0: "RUNTIME_ERROR",
	}
	ApplicationRuntimeErrorLogMessage_EventType_value = map[string]int32{
		"RUNTIME_ERROR": 0,
	}
)

func (x ApplicationRuntimeErrorLogMessage_EventType) Enum() *ApplicationRuntimeErrorLogMessage_EventType {
	p := new(ApplicationRuntimeErrorLogMessage_EventType)
	*p = x
	return p
}

func (x ApplicationRuntimeErrorLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationRuntimeErrorLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[4].Descriptor()
}

func (ApplicationRuntimeErrorLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[4]
}

func (x ApplicationRuntimeErrorLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationRuntimeErrorLogMessage_EventType.Descriptor instead.
func (ApplicationRuntimeErrorLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{6, 0}
}

type ApplicationNotRespondingErrorLogMessage_EventType int32

const (
	ApplicationNotRespondingErrorLogMessage_APPLICATION_NOT_RESPONDING ApplicationNotRespondingErrorLogMessage_EventType = 0
)

// Enum value maps for ApplicationNotRespondingErrorLogMessage_EventType.
var (
	ApplicationNotRespondingErrorLogMessage_EventType_name = map[int32]string{
		0: "APPLICATION_NOT_RESPONDING",
	}
	ApplicationNotRespondingErrorLogMessage_EventType_value = map[string]int32{
		"APPLICATION_NOT_RESPONDING": 0,
	}
)

func (x ApplicationNotRespondingErrorLogMessage_EventType) Enum() *ApplicationNotRespondingErrorLogMessage_EventType {
	p := new(ApplicationNotRespondingErrorLogMessage_EventType)
	*p = x
	return p
}

func (x ApplicationNotRespondingErrorLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationNotRespondingErrorLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[5].Descriptor()
}

func (ApplicationNotRespondingErrorLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[5]
}

func (x ApplicationNotRespondingErrorLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationNotRespondingErrorLogMessage_EventType.Descriptor instead.
func (ApplicationNotRespondingErrorLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{7, 0}
}

type SystemResetLogMessage_EventType int32

const (
	SystemResetLogMessage_SYSTEM_RESET SystemResetLogMessage_EventType = 0
	SystemResetLogMessage_BOOT_ERROR   SystemResetLogMessage_EventType = 1
)

// Enum value maps for SystemResetLogMessage_EventType.
var (
	SystemResetLogMessage_EventType_name = map[int32]string{
		0: "SYSTEM_RESET",
		1: "BOOT_ERROR",
	}
	SystemResetLogMessage_EventType_value = map[string]int32{
		"SYSTEM_RESET": 0,
		"BOOT_ERROR":   1,
	}
)

func (x SystemResetLogMessage_EventType) Enum() *SystemResetLogMessage_EventType {
	p := new(SystemResetLogMessage_EventType)
	*p = x
	return p
}

func (x SystemResetLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemResetLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[6].Descriptor()
}

func (SystemResetLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[6]
}

func (x SystemResetLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemResetLogMessage_EventType.Descriptor instead.
func (SystemResetLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{8, 0}
}

type SystemUsageLogMessage_EventType int32

const (
	SystemUsageLogMessage_MEMORY_ABOVE_THRESHOLD SystemUsageLogMessage_EventType = 0 // Total memory usage dropped below the threshold
	SystemUsageLogMessage_MEMORY_BELOW_THRESHOLD SystemUsageLogMessage_EventType = 1 // Total memory usage increased above the threshold
	SystemUsageLogMessage_CPU_ABOVE_THRESHOLD    SystemUsageLogMessage_EventType = 2 // Total cpu usage dropped below the threshold
	SystemUsageLogMessage_CPU_BELOW_THRESHOLD    SystemUsageLogMessage_EventType = 3 // Total cpu usage increased above the threshold
)

// Enum value maps for SystemUsageLogMessage_EventType.
var (
	SystemUsageLogMessage_EventType_name = map[int32]string{
		0: "MEMORY_ABOVE_THRESHOLD",
		1: "MEMORY_BELOW_THRESHOLD",
		2: "CPU_ABOVE_THRESHOLD",
		3: "CPU_BELOW_THRESHOLD",
	}
	SystemUsageLogMessage_EventType_value = map[string]int32{
		"MEMORY_ABOVE_THRESHOLD": 0,
		"MEMORY_BELOW_THRESHOLD": 1,
		"CPU_ABOVE_THRESHOLD":    2,
		"CPU_BELOW_THRESHOLD":    3,
	}
)

func (x SystemUsageLogMessage_EventType) Enum() *SystemUsageLogMessage_EventType {
	p := new(SystemUsageLogMessage_EventType)
	*p = x
	return p
}

func (x SystemUsageLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemUsageLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[7].Descriptor()
}

func (SystemUsageLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[7]
}

func (x SystemUsageLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemUsageLogMessage_EventType.Descriptor instead.
func (SystemUsageLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{9, 0}
}

type PhoneLogMessage_EventType int32

const (
	PhoneLogMessage_PHONE_CONNECTED    PhoneLogMessage_EventType = 0
	PhoneLogMessage_PHONE_DISCONNECTED PhoneLogMessage_EventType = 1
	PhoneLogMessage_INCOMING_CALL      PhoneLogMessage_EventType = 2
	PhoneLogMessage_OUTGOING_CALL      PhoneLogMessage_EventType = 3
	PhoneLogMessage_CALL_DISCONNECTED  PhoneLogMessage_EventType = 4 // Both called and received calls
	PhoneLogMessage_MESSAGE_SENT       PhoneLogMessage_EventType = 5
)

// Enum value maps for PhoneLogMessage_EventType.
var (
	PhoneLogMessage_EventType_name = map[int32]string{
		0: "PHONE_CONNECTED",
		1: "PHONE_DISCONNECTED",
		2: "INCOMING_CALL",
		3: "OUTGOING_CALL",
		4: "CALL_DISCONNECTED",
		5: "MESSAGE_SENT",
	}
	PhoneLogMessage_EventType_value = map[string]int32{
		"PHONE_CONNECTED":    0,
		"PHONE_DISCONNECTED": 1,
		"INCOMING_CALL":      2,
		"OUTGOING_CALL":      3,
		"CALL_DISCONNECTED":  4,
		"MESSAGE_SENT":       5,
	}
)

func (x PhoneLogMessage_EventType) Enum() *PhoneLogMessage_EventType {
	p := new(PhoneLogMessage_EventType)
	*p = x
	return p
}

func (x PhoneLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[8].Descriptor()
}

func (PhoneLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[8]
}

func (x PhoneLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneLogMessage_EventType.Descriptor instead.
func (PhoneLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{11, 0}
}

type PhoneLogMessage_InteractionMode int32

const (
	PhoneLogMessage_INTERACTION_MODE_UNKNOWN PhoneLogMessage_InteractionMode = 0
	PhoneLogMessage_HAPTIC                   PhoneLogMessage_InteractionMode = 1 // The user touched the phone
	PhoneLogMessage_VOICE                    PhoneLogMessage_InteractionMode = 2 // The user used voice to interact with the phone
)

// Enum value maps for PhoneLogMessage_InteractionMode.
var (
	PhoneLogMessage_InteractionMode_name = map[int32]string{
		0: "INTERACTION_MODE_UNKNOWN",
		1: "HAPTIC",
		2: "VOICE",
	}
	PhoneLogMessage_InteractionMode_value = map[string]int32{
		"INTERACTION_MODE_UNKNOWN": 0,
		"HAPTIC":                   1,
		"VOICE":                    2,
	}
)

func (x PhoneLogMessage_InteractionMode) Enum() *PhoneLogMessage_InteractionMode {
	p := new(PhoneLogMessage_InteractionMode)
	*p = x
	return p
}

func (x PhoneLogMessage_InteractionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneLogMessage_InteractionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[9].Descriptor()
}

func (PhoneLogMessage_InteractionMode) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[9]
}

func (x PhoneLogMessage_InteractionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneLogMessage_InteractionMode.Descriptor instead.
func (PhoneLogMessage_InteractionMode) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{11, 1}
}

type MusicLogMessage_EventType int32

const (
	MusicLogMessage_AUDIO_PLAYER_ON         MusicLogMessage_EventType = 0
	MusicLogMessage_AUDIO_PLAYER_OFF        MusicLogMessage_EventType = 1
	MusicLogMessage_AUDIO_SOURCE_CHANGED    MusicLogMessage_EventType = 2
	MusicLogMessage_RADIO_FREQUENCY_CHANGED MusicLogMessage_EventType = 3
)

// Enum value maps for MusicLogMessage_EventType.
var (
	MusicLogMessage_EventType_name = map[int32]string{
		0: "AUDIO_PLAYER_ON",
		1: "AUDIO_PLAYER_OFF",
		2: "AUDIO_SOURCE_CHANGED",
		3: "RADIO_FREQUENCY_CHANGED",
	}
	MusicLogMessage_EventType_value = map[string]int32{
		"AUDIO_PLAYER_ON":         0,
		"AUDIO_PLAYER_OFF":        1,
		"AUDIO_SOURCE_CHANGED":    2,
		"RADIO_FREQUENCY_CHANGED": 3,
	}
)

func (x MusicLogMessage_EventType) Enum() *MusicLogMessage_EventType {
	p := new(MusicLogMessage_EventType)
	*p = x
	return p
}

func (x MusicLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[10].Descriptor()
}

func (MusicLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[10]
}

func (x MusicLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicLogMessage_EventType.Descriptor instead.
func (MusicLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{12, 0}
}

type MusicLogMessage_AudioSource int32

const (
	MusicLogMessage_AUDIO_SOURCE_UNKNOWN MusicLogMessage_AudioSource = 0
	MusicLogMessage_FM                   MusicLogMessage_AudioSource = 1
	MusicLogMessage_AM                   MusicLogMessage_AudioSource = 2
	MusicLogMessage_SXM                  MusicLogMessage_AudioSource = 3
	MusicLogMessage_CD                   MusicLogMessage_AudioSource = 4
	MusicLogMessage_USB                  MusicLogMessage_AudioSource = 5
	MusicLogMessage_IPOD                 MusicLogMessage_AudioSource = 6
	MusicLogMessage_IP_APP               MusicLogMessage_AudioSource = 7
	MusicLogMessage_NATIVE_APP           MusicLogMessage_AudioSource = 8
	MusicLogMessage_BLUETOOTH            MusicLogMessage_AudioSource = 9
	MusicLogMessage_CARPLAY              MusicLogMessage_AudioSource = 10
	MusicLogMessage_ANDROID_AUTO         MusicLogMessage_AudioSource = 11
	MusicLogMessage_AUX                  MusicLogMessage_AudioSource = 12
	MusicLogMessage_RSE                  MusicLogMessage_AudioSource = 13
	MusicLogMessage_SDL                  MusicLogMessage_AudioSource = 14
	MusicLogMessage_OTHER                MusicLogMessage_AudioSource = 15
)

// Enum value maps for MusicLogMessage_AudioSource.
var (
	MusicLogMessage_AudioSource_name = map[int32]string{
		0:  "AUDIO_SOURCE_UNKNOWN",
		1:  "FM",
		2:  "AM",
		3:  "SXM",
		4:  "CD",
		5:  "USB",
		6:  "IPOD",
		7:  "IP_APP",
		8:  "NATIVE_APP",
		9:  "BLUETOOTH",
		10: "CARPLAY",
		11: "ANDROID_AUTO",
		12: "AUX",
		13: "RSE",
		14: "SDL",
		15: "OTHER",
	}
	MusicLogMessage_AudioSource_value = map[string]int32{
		"AUDIO_SOURCE_UNKNOWN": 0,
		"FM":                   1,
		"AM":                   2,
		"SXM":                  3,
		"CD":                   4,
		"USB":                  5,
		"IPOD":                 6,
		"IP_APP":               7,
		"NATIVE_APP":           8,
		"BLUETOOTH":            9,
		"CARPLAY":              10,
		"ANDROID_AUTO":         11,
		"AUX":                  12,
		"RSE":                  13,
		"SDL":                  14,
		"OTHER":                15,
	}
)

func (x MusicLogMessage_AudioSource) Enum() *MusicLogMessage_AudioSource {
	p := new(MusicLogMessage_AudioSource)
	*p = x
	return p
}

func (x MusicLogMessage_AudioSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicLogMessage_AudioSource) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[11].Descriptor()
}

func (MusicLogMessage_AudioSource) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[11]
}

func (x MusicLogMessage_AudioSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicLogMessage_AudioSource.Descriptor instead.
func (MusicLogMessage_AudioSource) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{12, 1}
}

type CPAALogMessage_EventType int32

const (
	CPAALogMessage_CARPLAY_CONNECTED         CPAALogMessage_EventType = 0
	CPAALogMessage_CARPLAY_DISCONNECTED      CPAALogMessage_EventType = 1
	CPAALogMessage_ANDROID_AUTO_CONNECTED    CPAALogMessage_EventType = 2
	CPAALogMessage_ANDROID_AUTO_DISCONNECTED CPAALogMessage_EventType = 3
	CPAALogMessage_NAVI_START                CPAALogMessage_EventType = 4
	CPAALogMessage_NAVI_STOP                 CPAALogMessage_EventType = 5
	CPAALogMessage_AUDIO_START               CPAALogMessage_EventType = 6
	CPAALogMessage_AUDIO_STOP                CPAALogMessage_EventType = 7
	CPAALogMessage_PHONE_START               CPAALogMessage_EventType = 8
	CPAALogMessage_PHONE_STOP                CPAALogMessage_EventType = 9
	CPAALogMessage_SPEECH_START              CPAALogMessage_EventType = 10
	CPAALogMessage_SPEECH_STOP               CPAALogMessage_EventType = 11
)

// Enum value maps for CPAALogMessage_EventType.
var (
	CPAALogMessage_EventType_name = map[int32]string{
		0:  "CARPLAY_CONNECTED",
		1:  "CARPLAY_DISCONNECTED",
		2:  "ANDROID_AUTO_CONNECTED",
		3:  "ANDROID_AUTO_DISCONNECTED",
		4:  "NAVI_START",
		5:  "NAVI_STOP",
		6:  "AUDIO_START",
		7:  "AUDIO_STOP",
		8:  "PHONE_START",
		9:  "PHONE_STOP",
		10: "SPEECH_START",
		11: "SPEECH_STOP",
	}
	CPAALogMessage_EventType_value = map[string]int32{
		"CARPLAY_CONNECTED":         0,
		"CARPLAY_DISCONNECTED":      1,
		"ANDROID_AUTO_CONNECTED":    2,
		"ANDROID_AUTO_DISCONNECTED": 3,
		"NAVI_START":                4,
		"NAVI_STOP":                 5,
		"AUDIO_START":               6,
		"AUDIO_STOP":                7,
		"PHONE_START":               8,
		"PHONE_STOP":                9,
		"SPEECH_START":              10,
		"SPEECH_STOP":               11,
	}
)

func (x CPAALogMessage_EventType) Enum() *CPAALogMessage_EventType {
	p := new(CPAALogMessage_EventType)
	*p = x
	return p
}

func (x CPAALogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CPAALogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[12].Descriptor()
}

func (CPAALogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[12]
}

func (x CPAALogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CPAALogMessage_EventType.Descriptor instead.
func (CPAALogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{13, 0}
}

type CPAALogMessage_ConnectionMode int32

const (
	CPAALogMessage_CONNECTION_MODE_UNKNOWN CPAALogMessage_ConnectionMode = 0
	CPAALogMessage_USB                     CPAALogMessage_ConnectionMode = 1
	CPAALogMessage_WIRELESS                CPAALogMessage_ConnectionMode = 2
)

// Enum value maps for CPAALogMessage_ConnectionMode.
var (
	CPAALogMessage_ConnectionMode_name = map[int32]string{
		0: "CONNECTION_MODE_UNKNOWN",
		1: "USB",
		2: "WIRELESS",
	}
	CPAALogMessage_ConnectionMode_value = map[string]int32{
		"CONNECTION_MODE_UNKNOWN": 0,
		"USB":                     1,
		"WIRELESS":                2,
	}
)

func (x CPAALogMessage_ConnectionMode) Enum() *CPAALogMessage_ConnectionMode {
	p := new(CPAALogMessage_ConnectionMode)
	*p = x
	return p
}

func (x CPAALogMessage_ConnectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CPAALogMessage_ConnectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[13].Descriptor()
}

func (CPAALogMessage_ConnectionMode) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[13]
}

func (x CPAALogMessage_ConnectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CPAALogMessage_ConnectionMode.Descriptor instead.
func (CPAALogMessage_ConnectionMode) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{13, 1}
}

type BluetoothLogMessage_EventType int32

const (
	BluetoothLogMessage_DEVICE_CONNECTED         BluetoothLogMessage_EventType = 0
	BluetoothLogMessage_DEVICE_UNABLE_TO_CONNECT BluetoothLogMessage_EventType = 1
	BluetoothLogMessage_DEVICE_DISCONNECTED      BluetoothLogMessage_EventType = 2
	BluetoothLogMessage_USER_PROFILE_RECEIVED    BluetoothLogMessage_EventType = 3
	BluetoothLogMessage_PROFILE_HFP              BluetoothLogMessage_EventType = 4
	BluetoothLogMessage_PROFILE_AVP              BluetoothLogMessage_EventType = 5
	BluetoothLogMessage_PROFILE_PBAP             BluetoothLogMessage_EventType = 6
	BluetoothLogMessage_PROFILE_SPP              BluetoothLogMessage_EventType = 7
	BluetoothLogMessage_PROFILE_GAP              BluetoothLogMessage_EventType = 8
	BluetoothLogMessage_PROFILE_GATT             BluetoothLogMessage_EventType = 9
	BluetoothLogMessage_PROFILE_A2DP             BluetoothLogMessage_EventType = 10
	BluetoothLogMessage_PROFILE_AVRCP            BluetoothLogMessage_EventType = 11
	BluetoothLogMessage_PROFILE_OPP              BluetoothLogMessage_EventType = 12
	BluetoothLogMessage_PROFILE_MAP              BluetoothLogMessage_EventType = 13
)

// Enum value maps for BluetoothLogMessage_EventType.
var (
	BluetoothLogMessage_EventType_name = map[int32]string{
		0:  "DEVICE_CONNECTED",
		1:  "DEVICE_UNABLE_TO_CONNECT",
		2:  "DEVICE_DISCONNECTED",
		3:  "USER_PROFILE_RECEIVED",
		4:  "PROFILE_HFP",
		5:  "PROFILE_AVP",
		6:  "PROFILE_PBAP",
		7:  "PROFILE_SPP",
		8:  "PROFILE_GAP",
		9:  "PROFILE_GATT",
		10: "PROFILE_A2DP",
		11: "PROFILE_AVRCP",
		12: "PROFILE_OPP",
		13: "PROFILE_MAP",
	}
	BluetoothLogMessage_EventType_value = map[string]int32{
		"DEVICE_CONNECTED":         0,
		"DEVICE_UNABLE_TO_CONNECT": 1,
		"DEVICE_DISCONNECTED":      2,
		"USER_PROFILE_RECEIVED":    3,
		"PROFILE_HFP":              4,
		"PROFILE_AVP":              5,
		"PROFILE_PBAP":             6,
		"PROFILE_SPP":              7,
		"PROFILE_GAP":              8,
		"PROFILE_GATT":             9,
		"PROFILE_A2DP":             10,
		"PROFILE_AVRCP":            11,
		"PROFILE_OPP":              12,
		"PROFILE_MAP":              13,
	}
)

func (x BluetoothLogMessage_EventType) Enum() *BluetoothLogMessage_EventType {
	p := new(BluetoothLogMessage_EventType)
	*p = x
	return p
}

func (x BluetoothLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[14].Descriptor()
}

func (BluetoothLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[14]
}

func (x BluetoothLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothLogMessage_EventType.Descriptor instead.
func (BluetoothLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{14, 0}
}

type BluetoothLogMessage_ErrorCode int32

const (
	BluetoothLogMessage_ERROR_CODE_UNKNOWN        BluetoothLogMessage_ErrorCode = 0
	BluetoothLogMessage_SUCCESS                   BluetoothLogMessage_ErrorCode = 1
	BluetoothLogMessage_PAIRING_FAILED            BluetoothLogMessage_ErrorCode = 2
	BluetoothLogMessage_PIN_MISSING               BluetoothLogMessage_ErrorCode = 3
	BluetoothLogMessage_CONNECTION_TIMEOUT        BluetoothLogMessage_ErrorCode = 4
	BluetoothLogMessage_REJECTED_BY_REMOTE_SIDE   BluetoothLogMessage_ErrorCode = 5
	BluetoothLogMessage_OUT_OF_BAND_PAIRING_ERROR BluetoothLogMessage_ErrorCode = 6
	BluetoothLogMessage_JUST_WORKS_PAIRING_ERROR  BluetoothLogMessage_ErrorCode = 7
	BluetoothLogMessage_SUPPLIER_DEFINED_ERROR    BluetoothLogMessage_ErrorCode = 8
)

// Enum value maps for BluetoothLogMessage_ErrorCode.
var (
	BluetoothLogMessage_ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNKNOWN",
		1: "SUCCESS",
		2: "PAIRING_FAILED",
		3: "PIN_MISSING",
		4: "CONNECTION_TIMEOUT",
		5: "REJECTED_BY_REMOTE_SIDE",
		6: "OUT_OF_BAND_PAIRING_ERROR",
		7: "JUST_WORKS_PAIRING_ERROR",
		8: "SUPPLIER_DEFINED_ERROR",
	}
	BluetoothLogMessage_ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNKNOWN":        0,
		"SUCCESS":                   1,
		"PAIRING_FAILED":            2,
		"PIN_MISSING":               3,
		"CONNECTION_TIMEOUT":        4,
		"REJECTED_BY_REMOTE_SIDE":   5,
		"OUT_OF_BAND_PAIRING_ERROR": 6,
		"JUST_WORKS_PAIRING_ERROR":  7,
		"SUPPLIER_DEFINED_ERROR":    8,
	}
)

func (x BluetoothLogMessage_ErrorCode) Enum() *BluetoothLogMessage_ErrorCode {
	p := new(BluetoothLogMessage_ErrorCode)
	*p = x
	return p
}

func (x BluetoothLogMessage_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothLogMessage_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[15].Descriptor()
}

func (BluetoothLogMessage_ErrorCode) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[15]
}

func (x BluetoothLogMessage_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothLogMessage_ErrorCode.Descriptor instead.
func (BluetoothLogMessage_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{14, 1}
}

type BluetoothLogMessage_Phone int32

const (
	BluetoothLogMessage_PHONE_UNKNOWN BluetoothLogMessage_Phone = 0
	BluetoothLogMessage_PRIMARY       BluetoothLogMessage_Phone = 1
	BluetoothLogMessage_SECONDARY     BluetoothLogMessage_Phone = 2
)

// Enum value maps for BluetoothLogMessage_Phone.
var (
	BluetoothLogMessage_Phone_name = map[int32]string{
		0: "PHONE_UNKNOWN",
		1: "PRIMARY",
		2: "SECONDARY",
	}
	BluetoothLogMessage_Phone_value = map[string]int32{
		"PHONE_UNKNOWN": 0,
		"PRIMARY":       1,
		"SECONDARY":     2,
	}
)

func (x BluetoothLogMessage_Phone) Enum() *BluetoothLogMessage_Phone {
	p := new(BluetoothLogMessage_Phone)
	*p = x
	return p
}

func (x BluetoothLogMessage_Phone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothLogMessage_Phone) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[16].Descriptor()
}

func (BluetoothLogMessage_Phone) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[16]
}

func (x BluetoothLogMessage_Phone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothLogMessage_Phone.Descriptor instead.
func (BluetoothLogMessage_Phone) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{14, 2}
}

type WifiLogMessage_EventType int32

const (
	WifiLogMessage_HOTSPOT_ON                      WifiLogMessage_EventType = 0
	WifiLogMessage_HOTSPOT_OFF                     WifiLogMessage_EventType = 1
	WifiLogMessage_DEVICE_CONNECTING_TO_HOTSPOT    WifiLogMessage_EventType = 2
	WifiLogMessage_DEVICE_DISCONNECTING_TO_HOTSPOT WifiLogMessage_EventType = 3
	WifiLogMessage_HU_CONNECTED_TO_AP              WifiLogMessage_EventType = 4
	WifiLogMessage_HU_DISCONNECTING_FROM_AP        WifiLogMessage_EventType = 5
)

// Enum value maps for WifiLogMessage_EventType.
var (
	WifiLogMessage_EventType_name = map[int32]string{
		0: "HOTSPOT_ON",
		1: "HOTSPOT_OFF",
		2: "DEVICE_CONNECTING_TO_HOTSPOT",
		3: "DEVICE_DISCONNECTING_TO_HOTSPOT",
		4: "HU_CONNECTED_TO_AP",
		5: "HU_DISCONNECTING_FROM_AP",
	}
	WifiLogMessage_EventType_value = map[string]int32{
		"HOTSPOT_ON":                      0,
		"HOTSPOT_OFF":                     1,
		"DEVICE_CONNECTING_TO_HOTSPOT":    2,
		"DEVICE_DISCONNECTING_TO_HOTSPOT": 3,
		"HU_CONNECTED_TO_AP":              4,
		"HU_DISCONNECTING_FROM_AP":        5,
	}
)

func (x WifiLogMessage_EventType) Enum() *WifiLogMessage_EventType {
	p := new(WifiLogMessage_EventType)
	*p = x
	return p
}

func (x WifiLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[17].Descriptor()
}

func (WifiLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[17]
}

func (x WifiLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiLogMessage_EventType.Descriptor instead.
func (WifiLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{15, 0}
}

type WifiLogMessage_ErrorCode int32

const (
	WifiLogMessage_ERROR_CODE_UNKNOWN   WifiLogMessage_ErrorCode = 0
	WifiLogMessage_SUCCESS              WifiLogMessage_ErrorCode = 1
	WifiLogMessage_CONNECT_ERROR        WifiLogMessage_ErrorCode = 2
	WifiLogMessage_AUTHENTICATION_ERROR WifiLogMessage_ErrorCode = 3
)

// Enum value maps for WifiLogMessage_ErrorCode.
var (
	WifiLogMessage_ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNKNOWN",
		1: "SUCCESS",
		2: "CONNECT_ERROR",
		3: "AUTHENTICATION_ERROR",
	}
	WifiLogMessage_ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNKNOWN":   0,
		"SUCCESS":              1,
		"CONNECT_ERROR":        2,
		"AUTHENTICATION_ERROR": 3,
	}
)

func (x WifiLogMessage_ErrorCode) Enum() *WifiLogMessage_ErrorCode {
	p := new(WifiLogMessage_ErrorCode)
	*p = x
	return p
}

func (x WifiLogMessage_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiLogMessage_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[18].Descriptor()
}

func (WifiLogMessage_ErrorCode) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[18]
}

func (x WifiLogMessage_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiLogMessage_ErrorCode.Descriptor instead.
func (WifiLogMessage_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{15, 1}
}

type WifiLogMessage_WifiStandard int32

const (
	WifiLogMessage_WIFI_STANDARD_UNKNOWN WifiLogMessage_WifiStandard = 0
	WifiLogMessage_WIFI_802_11B          WifiLogMessage_WifiStandard = 1
	WifiLogMessage_WIFI_802_11G          WifiLogMessage_WifiStandard = 2
	WifiLogMessage_WIFI_802_11N          WifiLogMessage_WifiStandard = 3
	WifiLogMessage_WIFI_802_11A          WifiLogMessage_WifiStandard = 4
	WifiLogMessage_WIFI_802_11AC         WifiLogMessage_WifiStandard = 5
	WifiLogMessage_WIFI_802_11AX         WifiLogMessage_WifiStandard = 6
	WifiLogMessage_UNDETECTABLE          WifiLogMessage_WifiStandard = 7
)

// Enum value maps for WifiLogMessage_WifiStandard.
var (
	WifiLogMessage_WifiStandard_name = map[int32]string{
		0: "WIFI_STANDARD_UNKNOWN",
		1: "WIFI_802_11B",
		2: "WIFI_802_11G",
		3: "WIFI_802_11N",
		4: "WIFI_802_11A",
		5: "WIFI_802_11AC",
		6: "WIFI_802_11AX",
		7: "UNDETECTABLE",
	}
	WifiLogMessage_WifiStandard_value = map[string]int32{
		"WIFI_STANDARD_UNKNOWN": 0,
		"WIFI_802_11B":          1,
		"WIFI_802_11G":          2,
		"WIFI_802_11N":          3,
		"WIFI_802_11A":          4,
		"WIFI_802_11AC":         5,
		"WIFI_802_11AX":         6,
		"UNDETECTABLE":          7,
	}
)

func (x WifiLogMessage_WifiStandard) Enum() *WifiLogMessage_WifiStandard {
	p := new(WifiLogMessage_WifiStandard)
	*p = x
	return p
}

func (x WifiLogMessage_WifiStandard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiLogMessage_WifiStandard) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[19].Descriptor()
}

func (WifiLogMessage_WifiStandard) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[19]
}

func (x WifiLogMessage_WifiStandard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiLogMessage_WifiStandard.Descriptor instead.
func (WifiLogMessage_WifiStandard) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{15, 2}
}

type ApplicationUsageLogMessage_EventType int32

const (
	ApplicationUsageLogMessage_APPLICATION_USAGE ApplicationUsageLogMessage_EventType = 0
)

// Enum value maps for ApplicationUsageLogMessage_EventType.
var (
	ApplicationUsageLogMessage_EventType_name = map[int32]string{
		0: "APPLICATION_USAGE",
	}
	ApplicationUsageLogMessage_EventType_value = map[string]int32{
		"APPLICATION_USAGE": 0,
	}
)

func (x ApplicationUsageLogMessage_EventType) Enum() *ApplicationUsageLogMessage_EventType {
	p := new(ApplicationUsageLogMessage_EventType)
	*p = x
	return p
}

func (x ApplicationUsageLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationUsageLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[20].Descriptor()
}

func (ApplicationUsageLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[20]
}

func (x ApplicationUsageLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationUsageLogMessage_EventType.Descriptor instead.
func (ApplicationUsageLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{16, 0}
}

type IpAppLogMessage_EventType int32

const (
	IpAppLogMessage_APP_LAUNCHED IpAppLogMessage_EventType = 0
	IpAppLogMessage_APP_CLOSED   IpAppLogMessage_EventType = 1
)

// Enum value maps for IpAppLogMessage_EventType.
var (
	IpAppLogMessage_EventType_name = map[int32]string{
		0: "APP_LAUNCHED",
		1: "APP_CLOSED",
	}
	IpAppLogMessage_EventType_value = map[string]int32{
		"APP_LAUNCHED": 0,
		"APP_CLOSED":   1,
	}
)

func (x IpAppLogMessage_EventType) Enum() *IpAppLogMessage_EventType {
	p := new(IpAppLogMessage_EventType)
	*p = x
	return p
}

func (x IpAppLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpAppLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[21].Descriptor()
}

func (IpAppLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[21]
}

func (x IpAppLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpAppLogMessage_EventType.Descriptor instead.
func (IpAppLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{17, 0}
}

type IpAppLogMessage_Reason int32

const (
	IpAppLogMessage_REASON_UNKNOWN    IpAppLogMessage_Reason = 0
	IpAppLogMessage_AUTOMATIC         IpAppLogMessage_Reason = 1
	IpAppLogMessage_HMI               IpAppLogMessage_Reason = 2
	IpAppLogMessage_VIRTUAL_ASSISTANT IpAppLogMessage_Reason = 3
	IpAppLogMessage_NAVI              IpAppLogMessage_Reason = 4
	IpAppLogMessage_GLOBAL_SEARCH     IpAppLogMessage_Reason = 5
)

// Enum value maps for IpAppLogMessage_Reason.
var (
	IpAppLogMessage_Reason_name = map[int32]string{
		0: "REASON_UNKNOWN",
		1: "AUTOMATIC",
		2: "HMI",
		3: "VIRTUAL_ASSISTANT",
		4: "NAVI",
		5: "GLOBAL_SEARCH",
	}
	IpAppLogMessage_Reason_value = map[string]int32{
		"REASON_UNKNOWN":    0,
		"AUTOMATIC":         1,
		"HMI":               2,
		"VIRTUAL_ASSISTANT": 3,
		"NAVI":              4,
		"GLOBAL_SEARCH":     5,
	}
)

func (x IpAppLogMessage_Reason) Enum() *IpAppLogMessage_Reason {
	p := new(IpAppLogMessage_Reason)
	*p = x
	return p
}

func (x IpAppLogMessage_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpAppLogMessage_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[22].Descriptor()
}

func (IpAppLogMessage_Reason) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[22]
}

func (x IpAppLogMessage_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpAppLogMessage_Reason.Descriptor instead.
func (IpAppLogMessage_Reason) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{17, 1}
}

type HmiKeyTraceLogMessage_EventType int32

const (
	HmiKeyTraceLogMessage_FILE_UPLOAD_TRIGGER HmiKeyTraceLogMessage_EventType = 0
)

// Enum value maps for HmiKeyTraceLogMessage_EventType.
var (
	HmiKeyTraceLogMessage_EventType_name = map[int32]string{
		0: "FILE_UPLOAD_TRIGGER",
	}
	HmiKeyTraceLogMessage_EventType_value = map[string]int32{
		"FILE_UPLOAD_TRIGGER": 0,
	}
)

func (x HmiKeyTraceLogMessage_EventType) Enum() *HmiKeyTraceLogMessage_EventType {
	p := new(HmiKeyTraceLogMessage_EventType)
	*p = x
	return p
}

func (x HmiKeyTraceLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HmiKeyTraceLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[23].Descriptor()
}

func (HmiKeyTraceLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[23]
}

func (x HmiKeyTraceLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HmiKeyTraceLogMessage_EventType.Descriptor instead.
func (HmiKeyTraceLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{18, 0}
}

type NavigationLogMessage_EventType int32

const (
	NavigationLogMessage_APPLICATION_CONNECTED    NavigationLogMessage_EventType = 0
	NavigationLogMessage_APPLICATION_DISCONNECTED NavigationLogMessage_EventType = 1
	NavigationLogMessage_TURN_BY_TURN_START       NavigationLogMessage_EventType = 2
	NavigationLogMessage_TURN_BY_TURN_STOP        NavigationLogMessage_EventType = 3
)

// Enum value maps for NavigationLogMessage_EventType.
var (
	NavigationLogMessage_EventType_name = map[int32]string{
		0: "APPLICATION_CONNECTED",
		1: "APPLICATION_DISCONNECTED",
		2: "TURN_BY_TURN_START",
		3: "TURN_BY_TURN_STOP",
	}
	NavigationLogMessage_EventType_value = map[string]int32{
		"APPLICATION_CONNECTED":    0,
		"APPLICATION_DISCONNECTED": 1,
		"TURN_BY_TURN_START":       2,
		"TURN_BY_TURN_STOP":        3,
	}
)

func (x NavigationLogMessage_EventType) Enum() *NavigationLogMessage_EventType {
	p := new(NavigationLogMessage_EventType)
	*p = x
	return p
}

func (x NavigationLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigationLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[24].Descriptor()
}

func (NavigationLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[24]
}

func (x NavigationLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigationLogMessage_EventType.Descriptor instead.
func (NavigationLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{19, 0}
}

type NavigationLogMessage_ConnectionType int32

const (
	NavigationLogMessage_CONNECTION_TYPE_UNKNOWN NavigationLogMessage_ConnectionType = 0
	NavigationLogMessage_WIFI                    NavigationLogMessage_ConnectionType = 1
	NavigationLogMessage_DCM                     NavigationLogMessage_ConnectionType = 2
)

// Enum value maps for NavigationLogMessage_ConnectionType.
var (
	NavigationLogMessage_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNKNOWN",
		1: "WIFI",
		2: "DCM",
	}
	NavigationLogMessage_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNKNOWN": 0,
		"WIFI":                    1,
		"DCM":                     2,
	}
)

func (x NavigationLogMessage_ConnectionType) Enum() *NavigationLogMessage_ConnectionType {
	p := new(NavigationLogMessage_ConnectionType)
	*p = x
	return p
}

func (x NavigationLogMessage_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigationLogMessage_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[25].Descriptor()
}

func (NavigationLogMessage_ConnectionType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[25]
}

func (x NavigationLogMessage_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigationLogMessage_ConnectionType.Descriptor instead.
func (NavigationLogMessage_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{19, 1}
}

type NavigationLogMessage_NavigationType int32

const (
	NavigationLogMessage_NAVIGATION_TYPE_UNKNOWN NavigationLogMessage_NavigationType = 0
	NavigationLogMessage_TMNA_CLOUD              NavigationLogMessage_NavigationType = 1
	NavigationLogMessage_INCLUDED                NavigationLogMessage_NavigationType = 2
)

// Enum value maps for NavigationLogMessage_NavigationType.
var (
	NavigationLogMessage_NavigationType_name = map[int32]string{
		0: "NAVIGATION_TYPE_UNKNOWN",
		1: "TMNA_CLOUD",
		2: "INCLUDED",
	}
	NavigationLogMessage_NavigationType_value = map[string]int32{
		"NAVIGATION_TYPE_UNKNOWN": 0,
		"TMNA_CLOUD":              1,
		"INCLUDED":                2,
	}
)

func (x NavigationLogMessage_NavigationType) Enum() *NavigationLogMessage_NavigationType {
	p := new(NavigationLogMessage_NavigationType)
	*p = x
	return p
}

func (x NavigationLogMessage_NavigationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigationLogMessage_NavigationType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[26].Descriptor()
}

func (NavigationLogMessage_NavigationType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[26]
}

func (x NavigationLogMessage_NavigationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigationLogMessage_NavigationType.Descriptor instead.
func (NavigationLogMessage_NavigationType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{19, 2}
}

type SmartphoneInformationLogMessage_EventType int32

const (
	SmartphoneInformationLogMessage_RECEIVED_WIFI SmartphoneInformationLogMessage_EventType = 0
	SmartphoneInformationLogMessage_RECEIVED_BT   SmartphoneInformationLogMessage_EventType = 1
)

// Enum value maps for SmartphoneInformationLogMessage_EventType.
var (
	SmartphoneInformationLogMessage_EventType_name = map[int32]string{
		0: "RECEIVED_WIFI",
		1: "RECEIVED_BT",
	}
	SmartphoneInformationLogMessage_EventType_value = map[string]int32{
		"RECEIVED_WIFI": 0,
		"RECEIVED_BT":   1,
	}
)

func (x SmartphoneInformationLogMessage_EventType) Enum() *SmartphoneInformationLogMessage_EventType {
	p := new(SmartphoneInformationLogMessage_EventType)
	*p = x
	return p
}

func (x SmartphoneInformationLogMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmartphoneInformationLogMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[27].Descriptor()
}

func (SmartphoneInformationLogMessage_EventType) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[27]
}

func (x SmartphoneInformationLogMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmartphoneInformationLogMessage_EventType.Descriptor instead.
func (SmartphoneInformationLogMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{20, 0}
}

type LogSettings_Setting_Trigger int32

const (
	LogSettings_Setting_DISABLED          LogSettings_Setting_Trigger = 0 // Do not upload any messages
	LogSettings_Setting_ON_EVENT          LogSettings_Setting_Trigger = 1 // Upload messages when they occur
	LogSettings_Setting_ON_PERIOD         LogSettings_Setting_Trigger = 2 // Upload messages in regular intervals
	LogSettings_Setting_APPLICATION_BASIS LogSettings_Setting_Trigger = 3 // The app decides on itself when to upload
	LogSettings_Setting_ON_ACC_ON         LogSettings_Setting_Trigger = 4 // Upload when ACC ON occurs
)

// Enum value maps for LogSettings_Setting_Trigger.
var (
	LogSettings_Setting_Trigger_name = map[int32]string{
		0: "DISABLED",
		1: "ON_EVENT",
		2: "ON_PERIOD",
		3: "APPLICATION_BASIS",
		4: "ON_ACC_ON",
	}
	LogSettings_Setting_Trigger_value = map[string]int32{
		"DISABLED":          0,
		"ON_EVENT":          1,
		"ON_PERIOD":         2,
		"APPLICATION_BASIS": 3,
		"ON_ACC_ON":         4,
	}
)

func (x LogSettings_Setting_Trigger) Enum() *LogSettings_Setting_Trigger {
	p := new(LogSettings_Setting_Trigger)
	*p = x
	return p
}

func (x LogSettings_Setting_Trigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogSettings_Setting_Trigger) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_logs_service_mock_proto_enumTypes[28].Descriptor()
}

func (LogSettings_Setting_Trigger) Type() protoreflect.EnumType {
	return &file_vehicle_logs_service_mock_proto_enumTypes[28]
}

func (x LogSettings_Setting_Trigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogSettings_Setting_Trigger.Descriptor instead.
func (LogSettings_Setting_Trigger) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{24, 0, 0}
}

//
// LogMessage describes a generic LogMessage. It contains all mandatory
// parameters. Every specific message type will augment this type with specific
// information
type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                     // UUID v4
	Severity       LogMessage_Severity  `protobuf:"varint,2,opt,name=severity,proto3,enum=com.toyota.ctp.v1.LogMessage_Severity" json:"severity,omitempty"` // The severity of the event (see Severity enum)
	Timestamp      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                           // The UTC timestamp at which the event occured
	Vin            string               `protobuf:"bytes,4,opt,name=vin,proto3" json:"vin,omitempty"`                                                       // The VIN. Identifies the vehicle
	HuSerial       string               `protobuf:"bytes,5,opt,name=hu_serial,json=huSerial,proto3" json:"hu_serial,omitempty"`                             // The ID of the head unit. Identifies the vehicle the log originated from
	HuVersion      string               `protobuf:"bytes,6,opt,name=hu_version,json=huVersion,proto3" json:"hu_version,omitempty"`                          // The version of the HU kernel
	HasAttachment  bool                 `protobuf:"varint,7,opt,name=has_attachment,json=hasAttachment,proto3" json:"has_attachment,omitempty"`             // True if a binary attachment (coredump, screenshot, stacktrace, ...) has been uploaded for this event.
	InformationKey string               `protobuf:"bytes,8,opt,name=information_key,json=informationKey,proto3" json:"information_key,omitempty"`           // The "user agent" (a string available on the HU which encodes certain properties)
	// Types that are assignable to Payload:
	//	*LogMessage_GpsLogMessage
	//	*LogMessage_IgnitionLogMessage
	//	*LogMessage_ApplicationRuntimeErrorLogMessage
	//	*LogMessage_ApplicationNotRespondingErrorLogMessage
	//	*LogMessage_SystemResetLogMessage
	//	*LogMessage_SystemUsageLogMessage
	//	*LogMessage_PhoneLogMessage
	//	*LogMessage_MusicLogMessage
	//	*LogMessage_CpaaLogMessage
	//	*LogMessage_BluetoothLogMessage
	//	*LogMessage_WifiLogMessage
	//	*LogMessage_ApplicationLogMessage
	//	*LogMessage_IpAppLogMessage
	//	*LogMessage_NavigationLogMessage
	//	*LogMessage_SmartphoneInformationLogMessage
	//	*LogMessage_Hmi_Key_Trace
	Payload isLogMessage_Payload `protobuf_oneof:"payload"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{0}
}

func (x *LogMessage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LogMessage) GetSeverity() LogMessage_Severity {
	if x != nil {
		return x.Severity
	}
	return LogMessage_INFO
}

func (x *LogMessage) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogMessage) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *LogMessage) GetHuSerial() string {
	if x != nil {
		return x.HuSerial
	}
	return ""
}

func (x *LogMessage) GetHuVersion() string {
	if x != nil {
		return x.HuVersion
	}
	return ""
}

func (x *LogMessage) GetHasAttachment() bool {
	if x != nil {
		return x.HasAttachment
	}
	return false
}

func (x *LogMessage) GetInformationKey() string {
	if x != nil {
		return x.InformationKey
	}
	return ""
}

func (m *LogMessage) GetPayload() isLogMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LogMessage) GetGpsLogMessage() *GPSLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_GpsLogMessage); ok {
		return x.GpsLogMessage
	}
	return nil
}

func (x *LogMessage) GetIgnitionLogMessage() *IgnitionLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_IgnitionLogMessage); ok {
		return x.IgnitionLogMessage
	}
	return nil
}

func (x *LogMessage) GetApplicationRuntimeErrorLogMessage() *ApplicationRuntimeErrorLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_ApplicationRuntimeErrorLogMessage); ok {
		return x.ApplicationRuntimeErrorLogMessage
	}
	return nil
}

func (x *LogMessage) GetApplicationNotRespondingErrorLogMessage() *ApplicationNotRespondingErrorLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_ApplicationNotRespondingErrorLogMessage); ok {
		return x.ApplicationNotRespondingErrorLogMessage
	}
	return nil
}

func (x *LogMessage) GetSystemResetLogMessage() *SystemResetLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_SystemResetLogMessage); ok {
		return x.SystemResetLogMessage
	}
	return nil
}

func (x *LogMessage) GetSystemUsageLogMessage() *SystemUsageLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_SystemUsageLogMessage); ok {
		return x.SystemUsageLogMessage
	}
	return nil
}

func (x *LogMessage) GetPhoneLogMessage() *PhoneLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_PhoneLogMessage); ok {
		return x.PhoneLogMessage
	}
	return nil
}

func (x *LogMessage) GetMusicLogMessage() *MusicLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_MusicLogMessage); ok {
		return x.MusicLogMessage
	}
	return nil
}

func (x *LogMessage) GetCpaaLogMessage() *CPAALogMessage {
	if x, ok := x.GetPayload().(*LogMessage_CpaaLogMessage); ok {
		return x.CpaaLogMessage
	}
	return nil
}

func (x *LogMessage) GetBluetoothLogMessage() *BluetoothLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_BluetoothLogMessage); ok {
		return x.BluetoothLogMessage
	}
	return nil
}

func (x *LogMessage) GetWifiLogMessage() *WifiLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_WifiLogMessage); ok {
		return x.WifiLogMessage
	}
	return nil
}

func (x *LogMessage) GetApplicationLogMessage() *ApplicationUsageLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_ApplicationLogMessage); ok {
		return x.ApplicationLogMessage
	}
	return nil
}

func (x *LogMessage) GetIpAppLogMessage() *IpAppLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_IpAppLogMessage); ok {
		return x.IpAppLogMessage
	}
	return nil
}

func (x *LogMessage) GetNavigationLogMessage() *NavigationLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_NavigationLogMessage); ok {
		return x.NavigationLogMessage
	}
	return nil
}

func (x *LogMessage) GetSmartphoneInformationLogMessage() *SmartphoneInformationLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_SmartphoneInformationLogMessage); ok {
		return x.SmartphoneInformationLogMessage
	}
	return nil
}

func (x *LogMessage) GetHmi_Key_Trace() *HmiKeyTraceLogMessage {
	if x, ok := x.GetPayload().(*LogMessage_Hmi_Key_Trace); ok {
		return x.Hmi_Key_Trace
	}
	return nil
}

type isLogMessage_Payload interface {
	isLogMessage_Payload()
}

type LogMessage_GpsLogMessage struct {
	GpsLogMessage *GPSLogMessage `protobuf:"bytes,9,opt,name=gps_log_message,json=gpsLogMessage,proto3,oneof"`
}

type LogMessage_IgnitionLogMessage struct {
	IgnitionLogMessage *IgnitionLogMessage `protobuf:"bytes,10,opt,name=ignition_log_message,json=ignitionLogMessage,proto3,oneof"`
}

type LogMessage_ApplicationRuntimeErrorLogMessage struct {
	ApplicationRuntimeErrorLogMessage *ApplicationRuntimeErrorLogMessage `protobuf:"bytes,11,opt,name=application_runtime_error_log_message,json=applicationRuntimeErrorLogMessage,proto3,oneof"`
}

type LogMessage_ApplicationNotRespondingErrorLogMessage struct {
	ApplicationNotRespondingErrorLogMessage *ApplicationNotRespondingErrorLogMessage `protobuf:"bytes,12,opt,name=application_not_responding_error_log_message,json=applicationNotRespondingErrorLogMessage,proto3,oneof"`
}

type LogMessage_SystemResetLogMessage struct {
	SystemResetLogMessage *SystemResetLogMessage `protobuf:"bytes,13,opt,name=system_reset_log_message,json=systemResetLogMessage,proto3,oneof"`
}

type LogMessage_SystemUsageLogMessage struct {
	SystemUsageLogMessage *SystemUsageLogMessage `protobuf:"bytes,14,opt,name=system_usage_log_message,json=systemUsageLogMessage,proto3,oneof"`
}

type LogMessage_PhoneLogMessage struct {
	PhoneLogMessage *PhoneLogMessage `protobuf:"bytes,15,opt,name=phone_log_message,json=phoneLogMessage,proto3,oneof"`
}

type LogMessage_MusicLogMessage struct {
	MusicLogMessage *MusicLogMessage `protobuf:"bytes,16,opt,name=music_log_message,json=musicLogMessage,proto3,oneof"`
}

type LogMessage_CpaaLogMessage struct {
	CpaaLogMessage *CPAALogMessage `protobuf:"bytes,17,opt,name=cpaa_log_message,json=cpaaLogMessage,proto3,oneof"`
}

type LogMessage_BluetoothLogMessage struct {
	BluetoothLogMessage *BluetoothLogMessage `protobuf:"bytes,18,opt,name=bluetooth_log_message,json=bluetoothLogMessage,proto3,oneof"`
}

type LogMessage_WifiLogMessage struct {
	WifiLogMessage *WifiLogMessage `protobuf:"bytes,19,opt,name=wifi_log_message,json=wifiLogMessage,proto3,oneof"`
}

type LogMessage_ApplicationLogMessage struct {
	ApplicationLogMessage *ApplicationUsageLogMessage `protobuf:"bytes,20,opt,name=application_log_message,json=applicationLogMessage,proto3,oneof"`
}

type LogMessage_IpAppLogMessage struct {
	IpAppLogMessage *IpAppLogMessage `protobuf:"bytes,21,opt,name=ip_app_log_message,json=ipAppLogMessage,proto3,oneof"`
}

type LogMessage_NavigationLogMessage struct {
	NavigationLogMessage *NavigationLogMessage `protobuf:"bytes,22,opt,name=navigation_log_message,json=navigationLogMessage,proto3,oneof"`
}

type LogMessage_SmartphoneInformationLogMessage struct {
	SmartphoneInformationLogMessage *SmartphoneInformationLogMessage `protobuf:"bytes,23,opt,name=smartphone_information_log_message,json=smartphoneInformationLogMessage,proto3,oneof"`
}

type LogMessage_Hmi_Key_Trace struct {
	Hmi_Key_Trace *HmiKeyTraceLogMessage `protobuf:"bytes,24,opt,name=hmi_Key_Trace,json=hmiKeyTrace,proto3,oneof"`
}

func (*LogMessage_GpsLogMessage) isLogMessage_Payload() {}

func (*LogMessage_IgnitionLogMessage) isLogMessage_Payload() {}

func (*LogMessage_ApplicationRuntimeErrorLogMessage) isLogMessage_Payload() {}

func (*LogMessage_ApplicationNotRespondingErrorLogMessage) isLogMessage_Payload() {}

func (*LogMessage_SystemResetLogMessage) isLogMessage_Payload() {}

func (*LogMessage_SystemUsageLogMessage) isLogMessage_Payload() {}

func (*LogMessage_PhoneLogMessage) isLogMessage_Payload() {}

func (*LogMessage_MusicLogMessage) isLogMessage_Payload() {}

func (*LogMessage_CpaaLogMessage) isLogMessage_Payload() {}

func (*LogMessage_BluetoothLogMessage) isLogMessage_Payload() {}

func (*LogMessage_WifiLogMessage) isLogMessage_Payload() {}

func (*LogMessage_ApplicationLogMessage) isLogMessage_Payload() {}

func (*LogMessage_IpAppLogMessage) isLogMessage_Payload() {}

func (*LogMessage_NavigationLogMessage) isLogMessage_Payload() {}

func (*LogMessage_SmartphoneInformationLogMessage) isLogMessage_Payload() {}

func (*LogMessage_Hmi_Key_Trace) isLogMessage_Payload() {}

//
// GPSLogMessage describes GPS related events
// Should use INFO severity
type GPSLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType GPSLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.GPSLogMessage_EventType" json:"event_type,omitempty"`
}

func (x *GPSLogMessage) Reset() {
	*x = GPSLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPSLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSLogMessage) ProtoMessage() {}

func (x *GPSLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSLogMessage.ProtoReflect.Descriptor instead.
func (*GPSLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{1}
}

func (x *GPSLogMessage) GetEventType() GPSLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return GPSLogMessage_LOCK_ACQUIRED
}

type IgnitionLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType IgnitionLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.IgnitionLogMessage_EventType" json:"event_type,omitempty"`
}

func (x *IgnitionLogMessage) Reset() {
	*x = IgnitionLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnitionLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnitionLogMessage) ProtoMessage() {}

func (x *IgnitionLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnitionLogMessage.ProtoReflect.Descriptor instead.
func (*IgnitionLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{2}
}

func (x *IgnitionLogMessage) GetEventType() IgnitionLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return IgnitionLogMessage_ACC_ON
}

//
// ScreenInfo describes when a specific screen was shown on the HU
type ScreenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId        string               `protobuf:"bytes,1,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`                      // The identifier of the screen
	ScreenTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=screen_timestamp,json=screenTimestamp,proto3" json:"screen_timestamp,omitempty"` // Time at which this screen was shown
}

func (x *ScreenInfo) Reset() {
	*x = ScreenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenInfo) ProtoMessage() {}

func (x *ScreenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenInfo.ProtoReflect.Descriptor instead.
func (*ScreenInfo) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{3}
}

func (x *ScreenInfo) GetScreenId() string {
	if x != nil {
		return x.ScreenId
	}
	return ""
}

func (x *ScreenInfo) GetScreenTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.ScreenTimestamp
	}
	return nil
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenSequence     []*ScreenInfo `protobuf:"bytes,1,rep,name=screen_sequence,json=screenSequence,proto3" json:"screen_sequence,omitempty"`               // The last few screens shown in reverse chronological order (most recent first)
	TotalMemoryUsage   float32       `protobuf:"fixed32,2,opt,name=total_memory_usage,json=totalMemoryUsage,proto3" json:"total_memory_usage,omitempty"`     // The total percentage of memory used by the HU
	TotalCpuUsage      float32       `protobuf:"fixed32,3,opt,name=total_cpu_usage,json=totalCpuUsage,proto3" json:"total_cpu_usage,omitempty"`              // The total percentage of cpu used by the HU
	TopFiveCpu         []*ProcInfo   `protobuf:"bytes,4,rep,name=top_five_cpu,json=topFiveCpu,proto3" json:"top_five_cpu,omitempty"`                         // A list of the top five processes by cpu and their current cpu and memory usage
	TopFiveMem         []*ProcInfo   `protobuf:"bytes,5,rep,name=top_five_mem,json=topFiveMem,proto3" json:"top_five_mem,omitempty"`                         // A list of the top five processes by mem and their current cpu and memory usage
	OutsideTemperature float32       `protobuf:"fixed32,6,opt,name=outside_temperature,json=outsideTemperature,proto3" json:"outside_temperature,omitempty"` // The outside temperature in Fahrenheit with 1 decimal precision
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{4}
}

func (x *Details) GetScreenSequence() []*ScreenInfo {
	if x != nil {
		return x.ScreenSequence
	}
	return nil
}

func (x *Details) GetTotalMemoryUsage() float32 {
	if x != nil {
		return x.TotalMemoryUsage
	}
	return 0
}

func (x *Details) GetTotalCpuUsage() float32 {
	if x != nil {
		return x.TotalCpuUsage
	}
	return 0
}

func (x *Details) GetTopFiveCpu() []*ProcInfo {
	if x != nil {
		return x.TopFiveCpu
	}
	return nil
}

func (x *Details) GetTopFiveMem() []*ProcInfo {
	if x != nil {
		return x.TopFiveMem
	}
	return nil
}

func (x *Details) GetOutsideTemperature() float32 {
	if x != nil {
		return x.OutsideTemperature
	}
	return 0
}

type ApplicationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName    string   `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`          // Name identifying the application in question
	ApplicationVersion string   `protobuf:"bytes,2,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"` // The vesion of the application
	Details            *Details `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ApplicationDetails) Reset() {
	*x = ApplicationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDetails) ProtoMessage() {}

func (x *ApplicationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDetails.ProtoReflect.Descriptor instead.
func (*ApplicationDetails) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationDetails) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationDetails) GetApplicationVersion() string {
	if x != nil {
		return x.ApplicationVersion
	}
	return ""
}

func (x *ApplicationDetails) GetDetails() *Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ApplicationRuntimeErrorLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          ApplicationRuntimeErrorLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationDetails *ApplicationDetails                         `protobuf:"bytes,2,opt,name=application_details,json=applicationDetails,proto3" json:"application_details,omitempty"`
}

func (x *ApplicationRuntimeErrorLogMessage) Reset() {
	*x = ApplicationRuntimeErrorLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationRuntimeErrorLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRuntimeErrorLogMessage) ProtoMessage() {}

func (x *ApplicationRuntimeErrorLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRuntimeErrorLogMessage.ProtoReflect.Descriptor instead.
func (*ApplicationRuntimeErrorLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationRuntimeErrorLogMessage) GetEventType() ApplicationRuntimeErrorLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return ApplicationRuntimeErrorLogMessage_RUNTIME_ERROR
}

func (x *ApplicationRuntimeErrorLogMessage) GetApplicationDetails() *ApplicationDetails {
	if x != nil {
		return x.ApplicationDetails
	}
	return nil
}

type ApplicationNotRespondingErrorLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          ApplicationNotRespondingErrorLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationDetails *ApplicationDetails                               `protobuf:"bytes,2,opt,name=application_details,json=applicationDetails,proto3" json:"application_details,omitempty"`
}

func (x *ApplicationNotRespondingErrorLogMessage) Reset() {
	*x = ApplicationNotRespondingErrorLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationNotRespondingErrorLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationNotRespondingErrorLogMessage) ProtoMessage() {}

func (x *ApplicationNotRespondingErrorLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationNotRespondingErrorLogMessage.ProtoReflect.Descriptor instead.
func (*ApplicationNotRespondingErrorLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{7}
}

func (x *ApplicationNotRespondingErrorLogMessage) GetEventType() ApplicationNotRespondingErrorLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return ApplicationNotRespondingErrorLogMessage_APPLICATION_NOT_RESPONDING
}

func (x *ApplicationNotRespondingErrorLogMessage) GetApplicationDetails() *ApplicationDetails {
	if x != nil {
		return x.ApplicationDetails
	}
	return nil
}

type SystemResetLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          SystemResetLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.SystemResetLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationDetails *ApplicationDetails             `protobuf:"bytes,2,opt,name=application_details,json=applicationDetails,proto3" json:"application_details,omitempty"`
}

func (x *SystemResetLogMessage) Reset() {
	*x = SystemResetLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemResetLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemResetLogMessage) ProtoMessage() {}

func (x *SystemResetLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemResetLogMessage.ProtoReflect.Descriptor instead.
func (*SystemResetLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{8}
}

func (x *SystemResetLogMessage) GetEventType() SystemResetLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return SystemResetLogMessage_SYSTEM_RESET
}

func (x *SystemResetLogMessage) GetApplicationDetails() *ApplicationDetails {
	if x != nil {
		return x.ApplicationDetails
	}
	return nil
}

//
// SystemUsageLogMessage current total system usage
// Can be used to alert if the system is under or overloaded
// Includes a list process info
type SystemUsageLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          SystemUsageLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.SystemUsageLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationDetails *ApplicationDetails             `protobuf:"bytes,2,opt,name=application_details,json=applicationDetails,proto3" json:"application_details,omitempty"`
}

func (x *SystemUsageLogMessage) Reset() {
	*x = SystemUsageLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemUsageLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUsageLogMessage) ProtoMessage() {}

func (x *SystemUsageLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUsageLogMessage.ProtoReflect.Descriptor instead.
func (*SystemUsageLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{9}
}

func (x *SystemUsageLogMessage) GetEventType() SystemUsageLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return SystemUsageLogMessage_MEMORY_ABOVE_THRESHOLD
}

func (x *SystemUsageLogMessage) GetApplicationDetails() *ApplicationDetails {
	if x != nil {
		return x.ApplicationDetails
	}
	return nil
}

//
// ProcInfo describes a running process and the resources it consumes
type ProcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName    string  `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`          // The name identifying the application in question
	ApplicationVersion string  `protobuf:"bytes,2,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"` // The version of the application
	CpuUsage           float32 `protobuf:"fixed32,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                             // The application cpu usage in %
	MemoryUsage        float32 `protobuf:"fixed32,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                    // The application memory usage in %
}

func (x *ProcInfo) Reset() {
	*x = ProcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInfo) ProtoMessage() {}

func (x *ProcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInfo.ProtoReflect.Descriptor instead.
func (*ProcInfo) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{10}
}

func (x *ProcInfo) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ProcInfo) GetApplicationVersion() string {
	if x != nil {
		return x.ApplicationVersion
	}
	return ""
}

func (x *ProcInfo) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ProcInfo) GetMemoryUsage() float32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

//
// PhoneLogMessage describes phone subsystem related events
type PhoneLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType       PhoneLogMessage_EventType       `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.PhoneLogMessage_EventType" json:"event_type,omitempty"`
	InteractionMode PhoneLogMessage_InteractionMode `protobuf:"varint,2,opt,name=interaction_mode,json=interactionMode,proto3,enum=com.toyota.ctp.v1.PhoneLogMessage_InteractionMode" json:"interaction_mode,omitempty"` // How the user interacted with the telephone
}

func (x *PhoneLogMessage) Reset() {
	*x = PhoneLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneLogMessage) ProtoMessage() {}

func (x *PhoneLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneLogMessage.ProtoReflect.Descriptor instead.
func (*PhoneLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{11}
}

func (x *PhoneLogMessage) GetEventType() PhoneLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return PhoneLogMessage_PHONE_CONNECTED
}

func (x *PhoneLogMessage) GetInteractionMode() PhoneLogMessage_InteractionMode {
	if x != nil {
		return x.InteractionMode
	}
	return PhoneLogMessage_INTERACTION_MODE_UNKNOWN
}

//
// MusicLogMessage describes music subsystem related events
type MusicLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType        MusicLogMessage_EventType   `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.MusicLogMessage_EventType" json:"event_type,omitempty"`
	AudioSource      MusicLogMessage_AudioSource `protobuf:"varint,2,opt,name=audio_source,json=audioSource,proto3,enum=com.toyota.ctp.v1.MusicLogMessage_AudioSource" json:"audio_source,omitempty"` // The currently selected audio source (regardless of event_type)
	RadioFrequency   float32                     `protobuf:"fixed32,3,opt,name=radio_frequency,json=radioFrequency,proto3" json:"radio_frequency,omitempty"`                                          // The current radio station (for applicable event_types, 0 otherwise)
	AppplicationName string                      `protobuf:"bytes,4,opt,name=appplication_name,json=appplicationName,proto3" json:"appplication_name,omitempty"`                                      // The name of the IP App or Native app (empty string otherwise)
	Location         *Location                   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`                                                                              // Lon and lat should have 1 decimal of accuracy
}

func (x *MusicLogMessage) Reset() {
	*x = MusicLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicLogMessage) ProtoMessage() {}

func (x *MusicLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicLogMessage.ProtoReflect.Descriptor instead.
func (*MusicLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{12}
}

func (x *MusicLogMessage) GetEventType() MusicLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return MusicLogMessage_AUDIO_PLAYER_ON
}

func (x *MusicLogMessage) GetAudioSource() MusicLogMessage_AudioSource {
	if x != nil {
		return x.AudioSource
	}
	return MusicLogMessage_AUDIO_SOURCE_UNKNOWN
}

func (x *MusicLogMessage) GetRadioFrequency() float32 {
	if x != nil {
		return x.RadioFrequency
	}
	return 0
}

func (x *MusicLogMessage) GetAppplicationName() string {
	if x != nil {
		return x.AppplicationName
	}
	return ""
}

func (x *MusicLogMessage) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

//
// CPAALogMessage describes events related to smartphone mirroring systems
// such as Apple Carplay or Android Auto
type CPAALogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType      CPAALogMessage_EventType      `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.CPAALogMessage_EventType" json:"event_type,omitempty"`
	ConnectionMode CPAALogMessage_ConnectionMode `protobuf:"varint,2,opt,name=connection_mode,json=connectionMode,proto3,enum=com.toyota.ctp.v1.CPAALogMessage_ConnectionMode" json:"connection_mode,omitempty"`
}

func (x *CPAALogMessage) Reset() {
	*x = CPAALogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPAALogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPAALogMessage) ProtoMessage() {}

func (x *CPAALogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPAALogMessage.ProtoReflect.Descriptor instead.
func (*CPAALogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{13}
}

func (x *CPAALogMessage) GetEventType() CPAALogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return CPAALogMessage_CARPLAY_CONNECTED
}

func (x *CPAALogMessage) GetConnectionMode() CPAALogMessage_ConnectionMode {
	if x != nil {
		return x.ConnectionMode
	}
	return CPAALogMessage_CONNECTION_MODE_UNKNOWN
}

//
// BluetoothLogMessage describes events of the bluetooth subsystem
type BluetoothLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          BluetoothLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.BluetoothLogMessage_EventType" json:"event_type,omitempty"`
	ErrorCode          BluetoothLogMessage_ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=com.toyota.ctp.v1.BluetoothLogMessage_ErrorCode" json:"error_code,omitempty"`
	Phone              BluetoothLogMessage_Phone     `protobuf:"varint,3,opt,name=phone,proto3,enum=com.toyota.ctp.v1.BluetoothLogMessage_Phone" json:"phone,omitempty"`
	SignalStrength     int32                         `protobuf:"varint,4,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`              // Bluetooth signal strength in dBm
	OutsideTemperature float32                       `protobuf:"fixed32,5,opt,name=outside_temperature,json=outsideTemperature,proto3" json:"outside_temperature,omitempty"` // Outside temperature in Fahrenheit with 1 decimal of precision
}

func (x *BluetoothLogMessage) Reset() {
	*x = BluetoothLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothLogMessage) ProtoMessage() {}

func (x *BluetoothLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothLogMessage.ProtoReflect.Descriptor instead.
func (*BluetoothLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{14}
}

func (x *BluetoothLogMessage) GetEventType() BluetoothLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return BluetoothLogMessage_DEVICE_CONNECTED
}

func (x *BluetoothLogMessage) GetErrorCode() BluetoothLogMessage_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return BluetoothLogMessage_ERROR_CODE_UNKNOWN
}

func (x *BluetoothLogMessage) GetPhone() BluetoothLogMessage_Phone {
	if x != nil {
		return x.Phone
	}
	return BluetoothLogMessage_PHONE_UNKNOWN
}

func (x *BluetoothLogMessage) GetSignalStrength() int32 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *BluetoothLogMessage) GetOutsideTemperature() float32 {
	if x != nil {
		return x.OutsideTemperature
	}
	return 0
}

//
// WifiLogMessage describes events related to the wifi subsystem
type WifiLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          WifiLogMessage_EventType    `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.WifiLogMessage_EventType" json:"event_type,omitempty"`
	ErrorCode          WifiLogMessage_ErrorCode    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=com.toyota.ctp.v1.WifiLogMessage_ErrorCode" json:"error_code,omitempty"`
	SignalStrength     int32                       `protobuf:"varint,3,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`                                              // The current wifi signal strength in dBm
	WifiStandard       WifiLogMessage_WifiStandard `protobuf:"varint,4,opt,name=wifi_standard,json=wifiStandard,proto3,enum=com.toyota.ctp.v1.WifiLogMessage_WifiStandard" json:"wifi_standard,omitempty"` // The current wifi standard being used
	OutsideTemperature float32                     `protobuf:"fixed32,5,opt,name=outside_temperature,json=outsideTemperature,proto3" json:"outside_temperature,omitempty"`                                 // Outside temperature in Fahrenheit with 1 decimal of precision
}

func (x *WifiLogMessage) Reset() {
	*x = WifiLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiLogMessage) ProtoMessage() {}

func (x *WifiLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiLogMessage.ProtoReflect.Descriptor instead.
func (*WifiLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{15}
}

func (x *WifiLogMessage) GetEventType() WifiLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return WifiLogMessage_HOTSPOT_ON
}

func (x *WifiLogMessage) GetErrorCode() WifiLogMessage_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return WifiLogMessage_ERROR_CODE_UNKNOWN
}

func (x *WifiLogMessage) GetSignalStrength() int32 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *WifiLogMessage) GetWifiStandard() WifiLogMessage_WifiStandard {
	if x != nil {
		return x.WifiStandard
	}
	return WifiLogMessage_WIFI_STANDARD_UNKNOWN
}

func (x *WifiLogMessage) GetOutsideTemperature() float32 {
	if x != nil {
		return x.OutsideTemperature
	}
	return 0
}

//
// ApplicationUsageLogMessage logs when a specific application was used
type ApplicationUsageLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          ApplicationUsageLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.ApplicationUsageLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationName    string                               `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`          // The name identifying the application recording this message
	ApplicationVersion string                               `protobuf:"bytes,3,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"` // The version of the application
	ScreenId           string                               `protobuf:"bytes,4,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
}

func (x *ApplicationUsageLogMessage) Reset() {
	*x = ApplicationUsageLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationUsageLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationUsageLogMessage) ProtoMessage() {}

func (x *ApplicationUsageLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationUsageLogMessage.ProtoReflect.Descriptor instead.
func (*ApplicationUsageLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{16}
}

func (x *ApplicationUsageLogMessage) GetEventType() ApplicationUsageLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return ApplicationUsageLogMessage_APPLICATION_USAGE
}

func (x *ApplicationUsageLogMessage) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationUsageLogMessage) GetApplicationVersion() string {
	if x != nil {
		return x.ApplicationVersion
	}
	return ""
}

func (x *ApplicationUsageLogMessage) GetScreenId() string {
	if x != nil {
		return x.ScreenId
	}
	return ""
}

type IpAppLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          IpAppLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.IpAppLogMessage_EventType" json:"event_type,omitempty"`
	ApplicationName    string                    `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`          // The name identifying the application recording this message
	ApplicationVersion string                    `protobuf:"bytes,3,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"` // The version of the application
	StartReason        IpAppLogMessage_Reason    `protobuf:"varint,4,opt,name=start_reason,json=startReason,proto3,enum=com.toyota.ctp.v1.IpAppLogMessage_Reason" json:"start_reason,omitempty"`
}

func (x *IpAppLogMessage) Reset() {
	*x = IpAppLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAppLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAppLogMessage) ProtoMessage() {}

func (x *IpAppLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAppLogMessage.ProtoReflect.Descriptor instead.
func (*IpAppLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{17}
}

func (x *IpAppLogMessage) GetEventType() IpAppLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return IpAppLogMessage_APP_LAUNCHED
}

func (x *IpAppLogMessage) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *IpAppLogMessage) GetApplicationVersion() string {
	if x != nil {
		return x.ApplicationVersion
	}
	return ""
}

func (x *IpAppLogMessage) GetStartReason() IpAppLogMessage_Reason {
	if x != nil {
		return x.StartReason
	}
	return IpAppLogMessage_REASON_UNKNOWN
}

type HmiKeyTraceLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType HmiKeyTraceLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.HmiKeyTraceLogMessage_EventType" json:"event_type,omitempty"`
}

func (x *HmiKeyTraceLogMessage) Reset() {
	*x = HmiKeyTraceLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmiKeyTraceLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmiKeyTraceLogMessage) ProtoMessage() {}

func (x *HmiKeyTraceLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmiKeyTraceLogMessage.ProtoReflect.Descriptor instead.
func (*HmiKeyTraceLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{18}
}

func (x *HmiKeyTraceLogMessage) GetEventType() HmiKeyTraceLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return HmiKeyTraceLogMessage_FILE_UPLOAD_TRIGGER
}

type NavigationLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType      NavigationLogMessage_EventType      `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.NavigationLogMessage_EventType" json:"event_type,omitempty"`
	ConnectionType NavigationLogMessage_ConnectionType `protobuf:"varint,2,opt,name=connection_type,json=connectionType,proto3,enum=com.toyota.ctp.v1.NavigationLogMessage_ConnectionType" json:"connection_type,omitempty"`
	NavigationType NavigationLogMessage_NavigationType `protobuf:"varint,3,opt,name=navigation_type,json=navigationType,proto3,enum=com.toyota.ctp.v1.NavigationLogMessage_NavigationType" json:"navigation_type,omitempty"`
	Location       *Location                           `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"` // lon and lat should have at least 2 decimal points of accuracy
}

func (x *NavigationLogMessage) Reset() {
	*x = NavigationLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationLogMessage) ProtoMessage() {}

func (x *NavigationLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationLogMessage.ProtoReflect.Descriptor instead.
func (*NavigationLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{19}
}

func (x *NavigationLogMessage) GetEventType() NavigationLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return NavigationLogMessage_APPLICATION_CONNECTED
}

func (x *NavigationLogMessage) GetConnectionType() NavigationLogMessage_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return NavigationLogMessage_CONNECTION_TYPE_UNKNOWN
}

func (x *NavigationLogMessage) GetNavigationType() NavigationLogMessage_NavigationType {
	if x != nil {
		return x.NavigationType
	}
	return NavigationLogMessage_NAVIGATION_TYPE_UNKNOWN
}

func (x *NavigationLogMessage) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

//
// SmartphoneInformationLogMessage contains SmartphoneInformation when it
// is received from OneApp
type SmartphoneInformationLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType             SmartphoneInformationLogMessage_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=com.toyota.ctp.v1.SmartphoneInformationLogMessage_EventType" json:"event_type,omitempty"`
	OneappUuid            string                                    `protobuf:"bytes,2,opt,name=oneapp_uuid,json=oneappUuid,proto3" json:"oneapp_uuid,omitempty"`
	SmartphoneInformation *SmartphoneInformation                    `protobuf:"bytes,3,opt,name=smartphone_information,json=smartphoneInformation,proto3" json:"smartphone_information,omitempty"`
}

func (x *SmartphoneInformationLogMessage) Reset() {
	*x = SmartphoneInformationLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartphoneInformationLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartphoneInformationLogMessage) ProtoMessage() {}

func (x *SmartphoneInformationLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartphoneInformationLogMessage.ProtoReflect.Descriptor instead.
func (*SmartphoneInformationLogMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{20}
}

func (x *SmartphoneInformationLogMessage) GetEventType() SmartphoneInformationLogMessage_EventType {
	if x != nil {
		return x.EventType
	}
	return SmartphoneInformationLogMessage_RECEIVED_WIFI
}

func (x *SmartphoneInformationLogMessage) GetOneappUuid() string {
	if x != nil {
		return x.OneappUuid
	}
	return ""
}

func (x *SmartphoneInformationLogMessage) GetSmartphoneInformation() *SmartphoneInformation {
	if x != nil {
		return x.SmartphoneInformation
	}
	return nil
}

//
// The smartphone information transmitted by OneApp
type SmartphoneInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attributes:
	//	*SmartphoneInformation_IosAttributes_
	//	*SmartphoneInformation_AndroidAttributes_
	Attributes isSmartphoneInformation_Attributes `protobuf_oneof:"attributes"`
}

func (x *SmartphoneInformation) Reset() {
	*x = SmartphoneInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartphoneInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartphoneInformation) ProtoMessage() {}

func (x *SmartphoneInformation) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartphoneInformation.ProtoReflect.Descriptor instead.
func (*SmartphoneInformation) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{21}
}

func (m *SmartphoneInformation) GetAttributes() isSmartphoneInformation_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *SmartphoneInformation) GetIosAttributes() *SmartphoneInformation_IosAttributes {
	if x, ok := x.GetAttributes().(*SmartphoneInformation_IosAttributes_); ok {
		return x.IosAttributes
	}
	return nil
}

func (x *SmartphoneInformation) GetAndroidAttributes() *SmartphoneInformation_AndroidAttributes {
	if x, ok := x.GetAttributes().(*SmartphoneInformation_AndroidAttributes_); ok {
		return x.AndroidAttributes
	}
	return nil
}

type isSmartphoneInformation_Attributes interface {
	isSmartphoneInformation_Attributes()
}

type SmartphoneInformation_IosAttributes_ struct {
	IosAttributes *SmartphoneInformation_IosAttributes `protobuf:"bytes,1,opt,name=ios_attributes,json=iosAttributes,proto3,oneof"`
}

type SmartphoneInformation_AndroidAttributes_ struct {
	AndroidAttributes *SmartphoneInformation_AndroidAttributes `protobuf:"bytes,2,opt,name=android_attributes,json=androidAttributes,proto3,oneof"`
}

func (*SmartphoneInformation_IosAttributes_) isSmartphoneInformation_Attributes() {}

func (*SmartphoneInformation_AndroidAttributes_) isSmartphoneInformation_Attributes() {}

//
// GetLogSettingsRequests is the argument for the GetLogSettings rpc
type GetLogSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vin            string `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	HuSerial       string `protobuf:"bytes,2,opt,name=hu_serial,json=huSerial,proto3" json:"hu_serial,omitempty"`                   // The ID of the Head Unit.
	InformationKey string `protobuf:"bytes,3,opt,name=information_key,json=informationKey,proto3" json:"information_key,omitempty"` // The "user agent" (a string available on the HU which encodes certain properties).
}

func (x *GetLogSettingsRequest) Reset() {
	*x = GetLogSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogSettingsRequest) ProtoMessage() {}

func (x *GetLogSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetLogSettingsRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{22}
}

func (x *GetLogSettingsRequest) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *GetLogSettingsRequest) GetHuSerial() string {
	if x != nil {
		return x.HuSerial
	}
	return ""
}

func (x *GetLogSettingsRequest) GetInformationKey() string {
	if x != nil {
		return x.InformationKey
	}
	return ""
}

//
// GetLogSettingsResponse is the response of the GetLogSettings rpc
type GetLogSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogSettings *LogSettings `protobuf:"bytes,1,opt,name=log_settings,json=logSettings,proto3" json:"log_settings,omitempty"`
}

func (x *GetLogSettingsResponse) Reset() {
	*x = GetLogSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogSettingsResponse) ProtoMessage() {}

func (x *GetLogSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetLogSettingsResponse) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{23}
}

func (x *GetLogSettingsResponse) GetLogSettings() *LogSettings {
	if x != nil {
		return x.LogSettings
	}
	return nil
}

//
// LogSettings describes the configuration of the HU AppData reporting component
type LogSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vin                  string                 `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	HuSerial             string                 `protobuf:"bytes,2,opt,name=hu_serial,json=huSerial,proto3" json:"hu_serial,omitempty"`
	CpuUsageThreshold    float32                `protobuf:"fixed32,3,opt,name=cpu_usage_threshold,json=cpuUsageThreshold,proto3" json:"cpu_usage_threshold,omitempty"`          // The cpu threshold to use in SystemUsageLogMessages, value can be ignored for all other message types
	MemoryUsageThreshold float32                `protobuf:"fixed32,4,opt,name=memory_usage_threshold,json=memoryUsageThreshold,proto3" json:"memory_usage_threshold,omitempty"` // The memory threshold to use in SystemUsageLogMessages, value can be ignored for all other message types
	Settings             []*LogSettings_Setting `protobuf:"bytes,5,rep,name=settings,proto3" json:"settings,omitempty"`                                                         // A list of settings. If it does not contain settings for certain message type, the current settings are kept.
}

func (x *LogSettings) Reset() {
	*x = LogSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSettings) ProtoMessage() {}

func (x *LogSettings) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSettings.ProtoReflect.Descriptor instead.
func (*LogSettings) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{24}
}

func (x *LogSettings) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *LogSettings) GetHuSerial() string {
	if x != nil {
		return x.HuSerial
	}
	return ""
}

func (x *LogSettings) GetCpuUsageThreshold() float32 {
	if x != nil {
		return x.CpuUsageThreshold
	}
	return 0
}

func (x *LogSettings) GetMemoryUsageThreshold() float32 {
	if x != nil {
		return x.MemoryUsageThreshold
	}
	return 0
}

func (x *LogSettings) GetSettings() []*LogSettings_Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UploadLogMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordCount uint64 `protobuf:"varint,1,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
}

func (x *UploadLogMessagesResponse) Reset() {
	*x = UploadLogMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLogMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLogMessagesResponse) ProtoMessage() {}

func (x *UploadLogMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLogMessagesResponse.ProtoReflect.Descriptor instead.
func (*UploadLogMessagesResponse) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{25}
}

func (x *UploadLogMessagesResponse) GetRecordCount() uint64 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

//
// GetAttachmentParametersRequest is the argument for the
// GetAttachmentParameters rpc
type GetAttachmentParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                         // uuid v4
	Vin            string               `protobuf:"bytes,2,opt,name=vin,proto3" json:"vin,omitempty"`                           // The VIN. Identifies the vehicle
	HuSerial       string               `protobuf:"bytes,3,opt,name=hu_serial,json=huSerial,proto3" json:"hu_serial,omitempty"` // The ID of the head unit. Identifies the vehicle the log originated from
	Timestamp      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`               // The UTC timestamp at which the event occured
	InformationKey string               `protobuf:"bytes,5,opt,name=information_key,json=informationKey,proto3" json:"information_key,omitempty"`
	MessageType    MessageType          `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3,enum=com.toyota.ctp.v1.MessageType" json:"message_type,omitempty"`
}

func (x *GetAttachmentParametersRequest) Reset() {
	*x = GetAttachmentParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachmentParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachmentParametersRequest) ProtoMessage() {}

func (x *GetAttachmentParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachmentParametersRequest.ProtoReflect.Descriptor instead.
func (*GetAttachmentParametersRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{26}
}

func (x *GetAttachmentParametersRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetAttachmentParametersRequest) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *GetAttachmentParametersRequest) GetHuSerial() string {
	if x != nil {
		return x.HuSerial
	}
	return ""
}

func (x *GetAttachmentParametersRequest) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetAttachmentParametersRequest) GetInformationKey() string {
	if x != nil {
		return x.InformationKey
	}
	return ""
}

func (x *GetAttachmentParametersRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_GPS_LOG_MESSAGE
}

//
// GetAttachmentParametersResponse is the response of the
// GetAttachmentParameters rpc
type GetAttachmentParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentUrl string `protobuf:"bytes,1,opt,name=attachment_url,json=attachmentUrl,proto3" json:"attachment_url,omitempty"` // Url the attachment should be posted to. Should
}

func (x *GetAttachmentParametersResponse) Reset() {
	*x = GetAttachmentParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachmentParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachmentParametersResponse) ProtoMessage() {}

func (x *GetAttachmentParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachmentParametersResponse.ProtoReflect.Descriptor instead.
func (*GetAttachmentParametersResponse) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{27}
}

func (x *GetAttachmentParametersResponse) GetAttachmentUrl() string {
	if x != nil {
		return x.AttachmentUrl
	}
	return ""
}

type MockConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vin          string `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	Api          string `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	ErrorCodeStr string `protobuf:"bytes,3,opt,name=error_code_str,json=errorCodeStr,proto3" json:"error_code_str,omitempty"`
	ErrorCode    uint32 `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *MockConfig) Reset() {
	*x = MockConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockConfig) ProtoMessage() {}

func (x *MockConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockConfig.ProtoReflect.Descriptor instead.
func (*MockConfig) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{28}
}

func (x *MockConfig) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *MockConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *MockConfig) GetErrorCodeStr() string {
	if x != nil {
		return x.ErrorCodeStr
	}
	return ""
}

func (x *MockConfig) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type SetMockConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*MockConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *SetMockConfigRequest) Reset() {
	*x = SetMockConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMockConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMockConfigRequest) ProtoMessage() {}

func (x *SetMockConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMockConfigRequest.ProtoReflect.Descriptor instead.
func (*SetMockConfigRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{29}
}

func (x *SetMockConfigRequest) GetConfigs() []*MockConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type SetMockConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SetMockConfigResponse) Reset() {
	*x = SetMockConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMockConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMockConfigResponse) ProtoMessage() {}

func (x *SetMockConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMockConfigResponse.ProtoReflect.Descriptor instead.
func (*SetMockConfigResponse) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{30}
}

func (x *SetMockConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SmartphoneInformation_IosAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion string `protobuf:"bytes,1,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	DeviceName   string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	OsVersion    string `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
}

func (x *SmartphoneInformation_IosAttributes) Reset() {
	*x = SmartphoneInformation_IosAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartphoneInformation_IosAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartphoneInformation_IosAttributes) ProtoMessage() {}

func (x *SmartphoneInformation_IosAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartphoneInformation_IosAttributes.ProtoReflect.Descriptor instead.
func (*SmartphoneInformation_IosAttributes) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{21, 0}
}

func (x *SmartphoneInformation_IosAttributes) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *SmartphoneInformation_IosAttributes) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SmartphoneInformation_IosAttributes) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

type SmartphoneInformation_AndroidAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsArchitecture         string `protobuf:"bytes,1,opt,name=os_architecture,json=osArchitecture,proto3" json:"os_architecture,omitempty"`
	KernelName             string `protobuf:"bytes,2,opt,name=kernel_name,json=kernelName,proto3" json:"kernel_name,omitempty"`
	KernelVersion          string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	BuildVersion           string `protobuf:"bytes,4,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	SmartphoneModel        string `protobuf:"bytes,5,opt,name=smartphone_model,json=smartphoneModel,proto3" json:"smartphone_model,omitempty"`
	AndroidVersion         string `protobuf:"bytes,6,opt,name=android_version,json=androidVersion,proto3" json:"android_version,omitempty"`
	SmartphoneManufacturer string `protobuf:"bytes,7,opt,name=smartphone_manufacturer,json=smartphoneManufacturer,proto3" json:"smartphone_manufacturer,omitempty"`
	Product                string `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *SmartphoneInformation_AndroidAttributes) Reset() {
	*x = SmartphoneInformation_AndroidAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartphoneInformation_AndroidAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartphoneInformation_AndroidAttributes) ProtoMessage() {}

func (x *SmartphoneInformation_AndroidAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartphoneInformation_AndroidAttributes.ProtoReflect.Descriptor instead.
func (*SmartphoneInformation_AndroidAttributes) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{21, 1}
}

func (x *SmartphoneInformation_AndroidAttributes) GetOsArchitecture() string {
	if x != nil {
		return x.OsArchitecture
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetKernelName() string {
	if x != nil {
		return x.KernelName
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetBuildVersion() string {
	if x != nil {
		return x.BuildVersion
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetSmartphoneModel() string {
	if x != nil {
		return x.SmartphoneModel
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetAndroidVersion() string {
	if x != nil {
		return x.AndroidVersion
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetSmartphoneManufacturer() string {
	if x != nil {
		return x.SmartphoneManufacturer
	}
	return ""
}

func (x *SmartphoneInformation_AndroidAttributes) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

//
// Contains the settings for a given log message type
type LogSettings_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType                  MessageType                 `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=com.toyota.ctp.v1.MessageType" json:"message_type,omitempty"` // The log message type the settings apply to
	Enabled                      bool                        `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                               // Whether logging for this type is enabled or not
	Trigger                      LogSettings_Setting_Trigger `protobuf:"varint,3,opt,name=trigger,proto3,enum=com.toyota.ctp.v1.LogSettings_Setting_Trigger" json:"trigger,omitempty"`            // The mechanism that decides when logs are uploaded
	Frequency                    uint64                      `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`                                                           // The time, in seconds, between two log pushes. 0 when ON_EVENT is not in use
	UploadScreenshotAttachements bool                        `protobuf:"varint,5,opt,name=upload_screenshot_attachements,json=uploadScreenshotAttachements,proto3" json:"upload_screenshot_attachements,omitempty"`
	UploadBinaryAttachements     bool                        `protobuf:"varint,6,opt,name=upload_binary_attachements,json=uploadBinaryAttachements,proto3" json:"upload_binary_attachements,omitempty"`
}

func (x *LogSettings_Setting) Reset() {
	*x = LogSettings_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_logs_service_mock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSettings_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSettings_Setting) ProtoMessage() {}

func (x *LogSettings_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_logs_service_mock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSettings_Setting.ProtoReflect.Descriptor instead.
func (*LogSettings_Setting) Descriptor() ([]byte, []int) {
	return file_vehicle_logs_service_mock_proto_rawDescGZIP(), []int{24, 0}
}

func (x *LogSettings_Setting) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_GPS_LOG_MESSAGE
}

func (x *LogSettings_Setting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LogSettings_Setting) GetTrigger() LogSettings_Setting_Trigger {
	if x != nil {
		return x.Trigger
	}
	return LogSettings_Setting_DISABLED
}

func (x *LogSettings_Setting) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *LogSettings_Setting) GetUploadScreenshotAttachements() bool {
	if x != nil {
		return x.UploadScreenshotAttachements
	}
	return false
}

func (x *LogSettings_Setting) GetUploadBinaryAttachements() bool {
	if x != nil {
		return x.UploadBinaryAttachements
	}
	return false
}

var File_vehicle_logs_service_mock_proto protoreflect.FileDescriptor

var file_vehicle_logs_service_mock_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x73, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x0f, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x75, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x75, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x75, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x59, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x25,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x21, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x27, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79,
	0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x70, 0x61, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x50, 0x41, 0x41, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x70, 0x61, 0x61, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5c, 0x0a, 0x15, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4d, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x77, 0x69, 0x66, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x70, 0x70,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x22,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1f,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x0d, 0x68, 0x6d, 0x69, 0x5f, 0x4b, 0x65, 0x79, 0x5f, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79,
	0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6d, 0x69, 0x4b, 0x65,
	0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x68, 0x6d, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22,
	0x42, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x0d, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x49,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f,
	0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43,
	0x43, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x47, 0x5f, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x22, 0x70,
	0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xd6, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f,
	0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74,
	0x6f, 0x70, 0x46, 0x69, 0x76, 0x65, 0x43, 0x70, 0x75, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x6f, 0x70,
	0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x6f,
	0x70, 0x46, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x21, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x1e, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x22,
	0x93, 0x02, 0x0a, 0x27, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2d, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4f,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x15, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x75,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x50, 0x55, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x50, 0x55, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x03, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f,
	0x03, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79,
	0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x55, 0x54, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x22, 0x46, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x50,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02,
	0x22, 0xfd, 0x04, 0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x46, 0x4d, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x58, 0x4d, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x44, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x53, 0x42, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x4f, 0x44, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x41, 0x52, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55,
	0x58, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x44, 0x4c, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0f,
	0x22, 0xfb, 0x03, 0x0a, 0x0e, 0x43, 0x50, 0x41, 0x41, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x41, 0x41,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x41,
	0x41, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x52, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x41, 0x52, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x56, 0x49, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x56, 0x49, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x45, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x0b, 0x22, 0x44, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x42, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0x98,
	0x07, 0x0a, 0x13, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x56, 0x50, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x42, 0x41, 0x50, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x50, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x50,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x41,
	0x54, 0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x32, 0x44, 0x50, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x56, 0x52, 0x43, 0x50, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x50, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0d, 0x22, 0xe3, 0x01, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x55, 0x53, 0x54, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x08, 0x22, 0x36, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x02, 0x22, 0x8e, 0x06, 0x0a, 0x0e, 0x57, 0x69,
	0x66, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x53, 0x0a,
	0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x54, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x54, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x54, 0x53, 0x50,
	0x4f, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f,
	0x48, 0x4f, 0x54, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x55, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x50, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x55, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x50, 0x10, 0x05, 0x22,
	0x5d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xa9,
	0x01, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12,
	0x19, 0x0a, 0x15, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49,
	0x46, 0x49, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x31, 0x42, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x57, 0x49, 0x46, 0x49, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x31, 0x47, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x31, 0x4e, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x31, 0x41,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31,
	0x31, 0x41, 0x43, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x38, 0x30,
	0x32, 0x5f, 0x31, 0x31, 0x41, 0x58, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0xa1,
	0x03, 0x0a, 0x0f, 0x49, 0x70, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79,
	0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x70, 0x70,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x41,
	0x55, 0x4e, 0x43, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x22, 0x68, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4d, 0x49, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x56, 0x49, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x10, 0x05, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x48, 0x6d, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6d, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x24, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x00, 0x22, 0xe7, 0x04, 0x0a, 0x14, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e,
	0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03,
	0x22, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x43, 0x4d,
	0x10, 0x02, 0x22, 0x4b, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4d, 0x4e, 0x41, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x02, 0x22,
	0xb1, 0x02, 0x0a, 0x1f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x61, 0x70, 0x70, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x46, 0x49,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x42,
	0x54, 0x10, 0x01, 0x22, 0xbc, 0x05, 0x0a, 0x15, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a,
	0x0e, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f,
	0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6f, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x6f, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6b,
	0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x74, 0x0a, 0x0d, 0x49,
	0x6f, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xd0, 0x02, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x73, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x6f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x75, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x97, 0x05, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x75, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xae, 0x03, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61,
	0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x1e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a,
	0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0x3e, 0x0a, 0x19, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x75, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x22, 0x75, 0x0a, 0x0a, 0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x83, 0x04, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x50, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x55,
	0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x55, 0x53, 0x49, 0x43, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x50, 0x41, 0x41, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x48,
	0x4d, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x49,
	0x52, 0x49, 0x55, 0x53, 0x5f, 0x58, 0x4d, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x0e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x41,
	0x52, 0x54, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x10, 0x32, 0xbe, 0x03, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e,
	0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f,
	0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x6f, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x3b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d,
	0x6c, 0x6f, 0x67, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x63,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vehicle_logs_service_mock_proto_rawDescOnce sync.Once
	file_vehicle_logs_service_mock_proto_rawDescData = file_vehicle_logs_service_mock_proto_rawDesc
)

func file_vehicle_logs_service_mock_proto_rawDescGZIP() []byte {
	file_vehicle_logs_service_mock_proto_rawDescOnce.Do(func() {
		file_vehicle_logs_service_mock_proto_rawDescData = protoimpl.X.CompressGZIP(file_vehicle_logs_service_mock_proto_rawDescData)
	})
	return file_vehicle_logs_service_mock_proto_rawDescData
}

var file_vehicle_logs_service_mock_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_vehicle_logs_service_mock_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_vehicle_logs_service_mock_proto_goTypes = []interface{}{
	(MessageType)(0),                                       // 0: com.toyota.ctp.v1.MessageType
	(LogMessage_Severity)(0),                               // 1: com.toyota.ctp.v1.LogMessage.Severity
	(GPSLogMessage_EventType)(0),                           // 2: com.toyota.ctp.v1.GPSLogMessage.EventType
	(IgnitionLogMessage_EventType)(0),                      // 3: com.toyota.ctp.v1.IgnitionLogMessage.EventType
	(ApplicationRuntimeErrorLogMessage_EventType)(0),       // 4: com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage.EventType
	(ApplicationNotRespondingErrorLogMessage_EventType)(0), // 5: com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage.EventType
	(SystemResetLogMessage_EventType)(0),                   // 6: com.toyota.ctp.v1.SystemResetLogMessage.EventType
	(SystemUsageLogMessage_EventType)(0),                   // 7: com.toyota.ctp.v1.SystemUsageLogMessage.EventType
	(PhoneLogMessage_EventType)(0),                         // 8: com.toyota.ctp.v1.PhoneLogMessage.EventType
	(PhoneLogMessage_InteractionMode)(0),                   // 9: com.toyota.ctp.v1.PhoneLogMessage.InteractionMode
	(MusicLogMessage_EventType)(0),                         // 10: com.toyota.ctp.v1.MusicLogMessage.EventType
	(MusicLogMessage_AudioSource)(0),                       // 11: com.toyota.ctp.v1.MusicLogMessage.AudioSource
	(CPAALogMessage_EventType)(0),                          // 12: com.toyota.ctp.v1.CPAALogMessage.EventType
	(CPAALogMessage_ConnectionMode)(0),                     // 13: com.toyota.ctp.v1.CPAALogMessage.ConnectionMode
	(BluetoothLogMessage_EventType)(0),                     // 14: com.toyota.ctp.v1.BluetoothLogMessage.EventType
	(BluetoothLogMessage_ErrorCode)(0),                     // 15: com.toyota.ctp.v1.BluetoothLogMessage.ErrorCode
	(BluetoothLogMessage_Phone)(0),                         // 16: com.toyota.ctp.v1.BluetoothLogMessage.Phone
	(WifiLogMessage_EventType)(0),                          // 17: com.toyota.ctp.v1.WifiLogMessage.EventType
	(WifiLogMessage_ErrorCode)(0),                          // 18: com.toyota.ctp.v1.WifiLogMessage.ErrorCode
	(WifiLogMessage_WifiStandard)(0),                       // 19: com.toyota.ctp.v1.WifiLogMessage.WifiStandard
	(ApplicationUsageLogMessage_EventType)(0),              // 20: com.toyota.ctp.v1.ApplicationUsageLogMessage.EventType
	(IpAppLogMessage_EventType)(0),                         // 21: com.toyota.ctp.v1.IpAppLogMessage.EventType
	(IpAppLogMessage_Reason)(0),                            // 22: com.toyota.ctp.v1.IpAppLogMessage.Reason
	(HmiKeyTraceLogMessage_EventType)(0),                   // 23: com.toyota.ctp.v1.HmiKeyTraceLogMessage.EventType
	(NavigationLogMessage_EventType)(0),                    // 24: com.toyota.ctp.v1.NavigationLogMessage.EventType
	(NavigationLogMessage_ConnectionType)(0),               // 25: com.toyota.ctp.v1.NavigationLogMessage.ConnectionType
	(NavigationLogMessage_NavigationType)(0),               // 26: com.toyota.ctp.v1.NavigationLogMessage.NavigationType
	(SmartphoneInformationLogMessage_EventType)(0),         // 27: com.toyota.ctp.v1.SmartphoneInformationLogMessage.EventType
	(LogSettings_Setting_Trigger)(0),                       // 28: com.toyota.ctp.v1.LogSettings.Setting.Trigger
	(*LogMessage)(nil),                                     // 29: com.toyota.ctp.v1.LogMessage
	(*GPSLogMessage)(nil),                                  // 30: com.toyota.ctp.v1.GPSLogMessage
	(*IgnitionLogMessage)(nil),                             // 31: com.toyota.ctp.v1.IgnitionLogMessage
	(*ScreenInfo)(nil),                                     // 32: com.toyota.ctp.v1.ScreenInfo
	(*Details)(nil),                                        // 33: com.toyota.ctp.v1.Details
	(*ApplicationDetails)(nil),                             // 34: com.toyota.ctp.v1.ApplicationDetails
	(*ApplicationRuntimeErrorLogMessage)(nil),              // 35: com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage
	(*ApplicationNotRespondingErrorLogMessage)(nil),        // 36: com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage
	(*SystemResetLogMessage)(nil),                          // 37: com.toyota.ctp.v1.SystemResetLogMessage
	(*SystemUsageLogMessage)(nil),                          // 38: com.toyota.ctp.v1.SystemUsageLogMessage
	(*ProcInfo)(nil),                                       // 39: com.toyota.ctp.v1.ProcInfo
	(*PhoneLogMessage)(nil),                                // 40: com.toyota.ctp.v1.PhoneLogMessage
	(*MusicLogMessage)(nil),                                // 41: com.toyota.ctp.v1.MusicLogMessage
	(*CPAALogMessage)(nil),                                 // 42: com.toyota.ctp.v1.CPAALogMessage
	(*BluetoothLogMessage)(nil),                            // 43: com.toyota.ctp.v1.BluetoothLogMessage
	(*WifiLogMessage)(nil),                                 // 44: com.toyota.ctp.v1.WifiLogMessage
	(*ApplicationUsageLogMessage)(nil),                     // 45: com.toyota.ctp.v1.ApplicationUsageLogMessage
	(*IpAppLogMessage)(nil),                                // 46: com.toyota.ctp.v1.IpAppLogMessage
	(*HmiKeyTraceLogMessage)(nil),                          // 47: com.toyota.ctp.v1.HmiKeyTraceLogMessage
	(*NavigationLogMessage)(nil),                           // 48: com.toyota.ctp.v1.NavigationLogMessage
	(*SmartphoneInformationLogMessage)(nil),                // 49: com.toyota.ctp.v1.SmartphoneInformationLogMessage
	(*SmartphoneInformation)(nil),                          // 50: com.toyota.ctp.v1.SmartphoneInformation
	(*GetLogSettingsRequest)(nil),                          // 51: com.toyota.ctp.v1.GetLogSettingsRequest
	(*GetLogSettingsResponse)(nil),                         // 52: com.toyota.ctp.v1.GetLogSettingsResponse
	(*LogSettings)(nil),                                    // 53: com.toyota.ctp.v1.LogSettings
	(*UploadLogMessagesResponse)(nil),                      // 54: com.toyota.ctp.v1.UploadLogMessagesResponse
	(*GetAttachmentParametersRequest)(nil),                 // 55: com.toyota.ctp.v1.GetAttachmentParametersRequest
	(*GetAttachmentParametersResponse)(nil),                // 56: com.toyota.ctp.v1.GetAttachmentParametersResponse
	(*MockConfig)(nil),                                     // 57: com.toyota.ctp.v1.MockConfig
	(*SetMockConfigRequest)(nil),                           // 58: com.toyota.ctp.v1.SetMockConfigRequest
	(*SetMockConfigResponse)(nil),                          // 59: com.toyota.ctp.v1.SetMockConfigResponse
	(*SmartphoneInformation_IosAttributes)(nil),            // 60: com.toyota.ctp.v1.SmartphoneInformation.IosAttributes
	(*SmartphoneInformation_AndroidAttributes)(nil),        // 61: com.toyota.ctp.v1.SmartphoneInformation.AndroidAttributes
	(*LogSettings_Setting)(nil),                            // 62: com.toyota.ctp.v1.LogSettings.Setting
	(*timestamp.Timestamp)(nil),                            // 63: google.protobuf.Timestamp
	(*Location)(nil),                                       // 64: com.toyota.ctp.v1.Location
}
var file_vehicle_logs_service_mock_proto_depIdxs = []int32{
	1,  // 0: com.toyota.ctp.v1.LogMessage.severity:type_name -> com.toyota.ctp.v1.LogMessage.Severity
	63, // 1: com.toyota.ctp.v1.LogMessage.timestamp:type_name -> google.protobuf.Timestamp
	30, // 2: com.toyota.ctp.v1.LogMessage.gps_log_message:type_name -> com.toyota.ctp.v1.GPSLogMessage
	31, // 3: com.toyota.ctp.v1.LogMessage.ignition_log_message:type_name -> com.toyota.ctp.v1.IgnitionLogMessage
	35, // 4: com.toyota.ctp.v1.LogMessage.application_runtime_error_log_message:type_name -> com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage
	36, // 5: com.toyota.ctp.v1.LogMessage.application_not_responding_error_log_message:type_name -> com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage
	37, // 6: com.toyota.ctp.v1.LogMessage.system_reset_log_message:type_name -> com.toyota.ctp.v1.SystemResetLogMessage
	38, // 7: com.toyota.ctp.v1.LogMessage.system_usage_log_message:type_name -> com.toyota.ctp.v1.SystemUsageLogMessage
	40, // 8: com.toyota.ctp.v1.LogMessage.phone_log_message:type_name -> com.toyota.ctp.v1.PhoneLogMessage
	41, // 9: com.toyota.ctp.v1.LogMessage.music_log_message:type_name -> com.toyota.ctp.v1.MusicLogMessage
	42, // 10: com.toyota.ctp.v1.LogMessage.cpaa_log_message:type_name -> com.toyota.ctp.v1.CPAALogMessage
	43, // 11: com.toyota.ctp.v1.LogMessage.bluetooth_log_message:type_name -> com.toyota.ctp.v1.BluetoothLogMessage
	44, // 12: com.toyota.ctp.v1.LogMessage.wifi_log_message:type_name -> com.toyota.ctp.v1.WifiLogMessage
	45, // 13: com.toyota.ctp.v1.LogMessage.application_log_message:type_name -> com.toyota.ctp.v1.ApplicationUsageLogMessage
	46, // 14: com.toyota.ctp.v1.LogMessage.ip_app_log_message:type_name -> com.toyota.ctp.v1.IpAppLogMessage
	48, // 15: com.toyota.ctp.v1.LogMessage.navigation_log_message:type_name -> com.toyota.ctp.v1.NavigationLogMessage
	49, // 16: com.toyota.ctp.v1.LogMessage.smartphone_information_log_message:type_name -> com.toyota.ctp.v1.SmartphoneInformationLogMessage
	47, // 17: com.toyota.ctp.v1.LogMessage.hmi_Key_Trace:type_name -> com.toyota.ctp.v1.HmiKeyTraceLogMessage
	2,  // 18: com.toyota.ctp.v1.GPSLogMessage.event_type:type_name -> com.toyota.ctp.v1.GPSLogMessage.EventType
	3,  // 19: com.toyota.ctp.v1.IgnitionLogMessage.event_type:type_name -> com.toyota.ctp.v1.IgnitionLogMessage.EventType
	63, // 20: com.toyota.ctp.v1.ScreenInfo.screen_timestamp:type_name -> google.protobuf.Timestamp
	32, // 21: com.toyota.ctp.v1.Details.screen_sequence:type_name -> com.toyota.ctp.v1.ScreenInfo
	39, // 22: com.toyota.ctp.v1.Details.top_five_cpu:type_name -> com.toyota.ctp.v1.ProcInfo
	39, // 23: com.toyota.ctp.v1.Details.top_five_mem:type_name -> com.toyota.ctp.v1.ProcInfo
	33, // 24: com.toyota.ctp.v1.ApplicationDetails.details:type_name -> com.toyota.ctp.v1.Details
	4,  // 25: com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage.event_type:type_name -> com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage.EventType
	34, // 26: com.toyota.ctp.v1.ApplicationRuntimeErrorLogMessage.application_details:type_name -> com.toyota.ctp.v1.ApplicationDetails
	5,  // 27: com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage.event_type:type_name -> com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage.EventType
	34, // 28: com.toyota.ctp.v1.ApplicationNotRespondingErrorLogMessage.application_details:type_name -> com.toyota.ctp.v1.ApplicationDetails
	6,  // 29: com.toyota.ctp.v1.SystemResetLogMessage.event_type:type_name -> com.toyota.ctp.v1.SystemResetLogMessage.EventType
	34, // 30: com.toyota.ctp.v1.SystemResetLogMessage.application_details:type_name -> com.toyota.ctp.v1.ApplicationDetails
	7,  // 31: com.toyota.ctp.v1.SystemUsageLogMessage.event_type:type_name -> com.toyota.ctp.v1.SystemUsageLogMessage.EventType
	34, // 32: com.toyota.ctp.v1.SystemUsageLogMessage.application_details:type_name -> com.toyota.ctp.v1.ApplicationDetails
	8,  // 33: com.toyota.ctp.v1.PhoneLogMessage.event_type:type_name -> com.toyota.ctp.v1.PhoneLogMessage.EventType
	9,  // 34: com.toyota.ctp.v1.PhoneLogMessage.interaction_mode:type_name -> com.toyota.ctp.v1.PhoneLogMessage.InteractionMode
	10, // 35: com.toyota.ctp.v1.MusicLogMessage.event_type:type_name -> com.toyota.ctp.v1.MusicLogMessage.EventType
	11, // 36: com.toyota.ctp.v1.MusicLogMessage.audio_source:type_name -> com.toyota.ctp.v1.MusicLogMessage.AudioSource
	64, // 37: com.toyota.ctp.v1.MusicLogMessage.location:type_name -> com.toyota.ctp.v1.Location
	12, // 38: com.toyota.ctp.v1.CPAALogMessage.event_type:type_name -> com.toyota.ctp.v1.CPAALogMessage.EventType
	13, // 39: com.toyota.ctp.v1.CPAALogMessage.connection_mode:type_name -> com.toyota.ctp.v1.CPAALogMessage.ConnectionMode
	14, // 40: com.toyota.ctp.v1.BluetoothLogMessage.event_type:type_name -> com.toyota.ctp.v1.BluetoothLogMessage.EventType
	15, // 41: com.toyota.ctp.v1.BluetoothLogMessage.error_code:type_name -> com.toyota.ctp.v1.BluetoothLogMessage.ErrorCode
	16, // 42: com.toyota.ctp.v1.BluetoothLogMessage.phone:type_name -> com.toyota.ctp.v1.BluetoothLogMessage.Phone
	17, // 43: com.toyota.ctp.v1.WifiLogMessage.event_type:type_name -> com.toyota.ctp.v1.WifiLogMessage.EventType
	18, // 44: com.toyota.ctp.v1.WifiLogMessage.error_code:type_name -> com.toyota.ctp.v1.WifiLogMessage.ErrorCode
	19, // 45: com.toyota.ctp.v1.WifiLogMessage.wifi_standard:type_name -> com.toyota.ctp.v1.WifiLogMessage.WifiStandard
	20, // 46: com.toyota.ctp.v1.ApplicationUsageLogMessage.event_type:type_name -> com.toyota.ctp.v1.ApplicationUsageLogMessage.EventType
	21, // 47: com.toyota.ctp.v1.IpAppLogMessage.event_type:type_name -> com.toyota.ctp.v1.IpAppLogMessage.EventType
	22, // 48: com.toyota.ctp.v1.IpAppLogMessage.start_reason:type_name -> com.toyota.ctp.v1.IpAppLogMessage.Reason
	23, // 49: com.toyota.ctp.v1.HmiKeyTraceLogMessage.event_type:type_name -> com.toyota.ctp.v1.HmiKeyTraceLogMessage.EventType
	24, // 50: com.toyota.ctp.v1.NavigationLogMessage.event_type:type_name -> com.toyota.ctp.v1.NavigationLogMessage.EventType
	25, // 51: com.toyota.ctp.v1.NavigationLogMessage.connection_type:type_name -> com.toyota.ctp.v1.NavigationLogMessage.ConnectionType
	26, // 52: com.toyota.ctp.v1.NavigationLogMessage.navigation_type:type_name -> com.toyota.ctp.v1.NavigationLogMessage.NavigationType
	64, // 53: com.toyota.ctp.v1.NavigationLogMessage.location:type_name -> com.toyota.ctp.v1.Location
	27, // 54: com.toyota.ctp.v1.SmartphoneInformationLogMessage.event_type:type_name -> com.toyota.ctp.v1.SmartphoneInformationLogMessage.EventType
	50, // 55: com.toyota.ctp.v1.SmartphoneInformationLogMessage.smartphone_information:type_name -> com.toyota.ctp.v1.SmartphoneInformation
	60, // 56: com.toyota.ctp.v1.SmartphoneInformation.ios_attributes:type_name -> com.toyota.ctp.v1.SmartphoneInformation.IosAttributes
	61, // 57: com.toyota.ctp.v1.SmartphoneInformation.android_attributes:type_name -> com.toyota.ctp.v1.SmartphoneInformation.AndroidAttributes
	53, // 58: com.toyota.ctp.v1.GetLogSettingsResponse.log_settings:type_name -> com.toyota.ctp.v1.LogSettings
	62, // 59: com.toyota.ctp.v1.LogSettings.settings:type_name -> com.toyota.ctp.v1.LogSettings.Setting
	63, // 60: com.toyota.ctp.v1.GetAttachmentParametersRequest.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 61: com.toyota.ctp.v1.GetAttachmentParametersRequest.message_type:type_name -> com.toyota.ctp.v1.MessageType
	57, // 62: com.toyota.ctp.v1.SetMockConfigRequest.configs:type_name -> com.toyota.ctp.v1.MockConfig
	0,  // 63: com.toyota.ctp.v1.LogSettings.Setting.message_type:type_name -> com.toyota.ctp.v1.MessageType
	28, // 64: com.toyota.ctp.v1.LogSettings.Setting.trigger:type_name -> com.toyota.ctp.v1.LogSettings.Setting.Trigger
	51, // 65: com.toyota.ctp.v1.LogService.GetLogSettings:input_type -> com.toyota.ctp.v1.GetLogSettingsRequest
	29, // 66: com.toyota.ctp.v1.LogService.UploadLogMessages:input_type -> com.toyota.ctp.v1.LogMessage
	55, // 67: com.toyota.ctp.v1.LogService.GetAttachmentParameters:input_type -> com.toyota.ctp.v1.GetAttachmentParametersRequest
	58, // 68: com.toyota.ctp.v1.LogService.SetMockConfig:input_type -> com.toyota.ctp.v1.SetMockConfigRequest
	52, // 69: com.toyota.ctp.v1.LogService.GetLogSettings:output_type -> com.toyota.ctp.v1.GetLogSettingsResponse
	54, // 70: com.toyota.ctp.v1.LogService.UploadLogMessages:output_type -> com.toyota.ctp.v1.UploadLogMessagesResponse
	56, // 71: com.toyota.ctp.v1.LogService.GetAttachmentParameters:output_type -> com.toyota.ctp.v1.GetAttachmentParametersResponse
	59, // 72: com.toyota.ctp.v1.LogService.SetMockConfig:output_type -> com.toyota.ctp.v1.SetMockConfigResponse
	69, // [69:73] is the sub-list for method output_type
	65, // [65:69] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_vehicle_logs_service_mock_proto_init() }
func file_vehicle_logs_service_mock_proto_init() {
	if File_vehicle_logs_service_mock_proto != nil {
		return
	}
	file_location_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vehicle_logs_service_mock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPSLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnitionLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationRuntimeErrorLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationNotRespondingErrorLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemResetLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemUsageLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPAALogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationUsageLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAppLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmiKeyTraceLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartphoneInformationLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartphoneInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLogMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachmentParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachmentParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMockConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMockConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartphoneInformation_IosAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartphoneInformation_AndroidAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_logs_service_mock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSettings_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vehicle_logs_service_mock_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LogMessage_GpsLogMessage)(nil),
		(*LogMessage_IgnitionLogMessage)(nil),
		(*LogMessage_ApplicationRuntimeErrorLogMessage)(nil),
		(*LogMessage_ApplicationNotRespondingErrorLogMessage)(nil),
		(*LogMessage_SystemResetLogMessage)(nil),
		(*LogMessage_SystemUsageLogMessage)(nil),
		(*LogMessage_PhoneLogMessage)(nil),
		(*LogMessage_MusicLogMessage)(nil),
		(*LogMessage_CpaaLogMessage)(nil),
		(*LogMessage_BluetoothLogMessage)(nil),
		(*LogMessage_WifiLogMessage)(nil),
		(*LogMessage_ApplicationLogMessage)(nil),
		(*LogMessage_IpAppLogMessage)(nil),
		(*LogMessage_NavigationLogMessage)(nil),
		(*LogMessage_SmartphoneInformationLogMessage)(nil),
		(*LogMessage_Hmi_Key_Trace)(nil),
	}
	file_vehicle_logs_service_mock_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SmartphoneInformation_IosAttributes_)(nil),
		(*SmartphoneInformation_AndroidAttributes_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vehicle_logs_service_mock_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vehicle_logs_service_mock_proto_goTypes,
		DependencyIndexes: file_vehicle_logs_service_mock_proto_depIdxs,
		EnumInfos:         file_vehicle_logs_service_mock_proto_enumTypes,
		MessageInfos:      file_vehicle_logs_service_mock_proto_msgTypes,
	}.Build()
	File_vehicle_logs_service_mock_proto = out.File
	file_vehicle_logs_service_mock_proto_rawDesc = nil
	file_vehicle_logs_service_mock_proto_goTypes = nil
	file_vehicle_logs_service_mock_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	// GetLogSettings retrieves the latest log settings for a VIN. Settings are
	// small enough that the overhead of doing version management is not justified
	GetLogSettings(ctx context.Context, in *GetLogSettingsRequest, opts ...grpc.CallOption) (*GetLogSettingsResponse, error)
	// UploadLogMessages pushes logs to the server.
	//
	// It can used in a streaming fashion to deliver logs as they happen in real
	// time, or in a batch mode where the HU periodically calls this rpc and
	// delivers any messages
	UploadLogMessages(ctx context.Context, opts ...grpc.CallOption) (LogService_UploadLogMessagesClient, error)
	// Get parameters (url and token) to upload a log attachment
	//
	// In case the server does not want to receive the attachment it will return
	// one of the following error codes:
	//   * PERMISSION_DENIED: in case the upload of binaries is disabled in the
	//     settings. This should not be retried
	//   * RESOURCE_EXHAUSTED: in case the client has been spamming the server, or
	//     the server has capacity issues. The client should start doing a
	//     randomized exponential backoff retry.
	GetAttachmentParameters(ctx context.Context, in *GetAttachmentParametersRequest, opts ...grpc.CallOption) (*GetAttachmentParametersResponse, error)
	// MockConfigurator
	SetMockConfig(ctx context.Context, in *SetMockConfigRequest, opts ...grpc.CallOption) (*SetMockConfigResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) GetLogSettings(ctx context.Context, in *GetLogSettingsRequest, opts ...grpc.CallOption) (*GetLogSettingsResponse, error) {
	out := new(GetLogSettingsResponse)
	err := c.cc.Invoke(ctx, "/com.toyota.ctp.v1.LogService/GetLogSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) UploadLogMessages(ctx context.Context, opts ...grpc.CallOption) (LogService_UploadLogMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/com.toyota.ctp.v1.LogService/UploadLogMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceUploadLogMessagesClient{stream}
	return x, nil
}

type LogService_UploadLogMessagesClient interface {
	Send(*LogMessage) error
	CloseAndRecv() (*UploadLogMessagesResponse, error)
	grpc.ClientStream
}

type logServiceUploadLogMessagesClient struct {
	grpc.ClientStream
}

func (x *logServiceUploadLogMessagesClient) Send(m *LogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceUploadLogMessagesClient) CloseAndRecv() (*UploadLogMessagesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadLogMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) GetAttachmentParameters(ctx context.Context, in *GetAttachmentParametersRequest, opts ...grpc.CallOption) (*GetAttachmentParametersResponse, error) {
	out := new(GetAttachmentParametersResponse)
	err := c.cc.Invoke(ctx, "/com.toyota.ctp.v1.LogService/GetAttachmentParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SetMockConfig(ctx context.Context, in *SetMockConfigRequest, opts ...grpc.CallOption) (*SetMockConfigResponse, error) {
	out := new(SetMockConfigResponse)
	err := c.cc.Invoke(ctx, "/com.toyota.ctp.v1.LogService/SetMockConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	// GetLogSettings retrieves the latest log settings for a VIN. Settings are
	// small enough that the overhead of doing version management is not justified
	GetLogSettings(context.Context, *GetLogSettingsRequest) (*GetLogSettingsResponse, error)
	// UploadLogMessages pushes logs to the server.
	//
	// It can used in a streaming fashion to deliver logs as they happen in real
	// time, or in a batch mode where the HU periodically calls this rpc and
	// delivers any messages
	UploadLogMessages(LogService_UploadLogMessagesServer) error
	// Get parameters (url and token) to upload a log attachment
	//
	// In case the server does not want to receive the attachment it will return
	// one of the following error codes:
	//   * PERMISSION_DENIED: in case the upload of binaries is disabled in the
	//     settings. This should not be retried
	//   * RESOURCE_EXHAUSTED: in case the client has been spamming the server, or
	//     the server has capacity issues. The client should start doing a
	//     randomized exponential backoff retry.
	GetAttachmentParameters(context.Context, *GetAttachmentParametersRequest) (*GetAttachmentParametersResponse, error)
	// MockConfigurator
	SetMockConfig(context.Context, *SetMockConfigRequest) (*SetMockConfigResponse, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) GetLogSettings(context.Context, *GetLogSettingsRequest) (*GetLogSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogSettings not implemented")
}
func (*UnimplementedLogServiceServer) UploadLogMessages(LogService_UploadLogMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLogMessages not implemented")
}
func (*UnimplementedLogServiceServer) GetAttachmentParameters(context.Context, *GetAttachmentParametersRequest) (*GetAttachmentParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachmentParameters not implemented")
}
func (*UnimplementedLogServiceServer) SetMockConfig(context.Context, *SetMockConfigRequest) (*SetMockConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMockConfig not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_GetLogSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.toyota.ctp.v1.LogService/GetLogSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogSettings(ctx, req.(*GetLogSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_UploadLogMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).UploadLogMessages(&logServiceUploadLogMessagesServer{stream})
}

type LogService_UploadLogMessagesServer interface {
	SendAndClose(*UploadLogMessagesResponse) error
	Recv() (*LogMessage, error)
	grpc.ServerStream
}

type logServiceUploadLogMessagesServer struct {
	grpc.ServerStream
}

func (x *logServiceUploadLogMessagesServer) SendAndClose(m *UploadLogMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceUploadLogMessagesServer) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_GetAttachmentParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetAttachmentParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.toyota.ctp.v1.LogService/GetAttachmentParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetAttachmentParameters(ctx, req.(*GetAttachmentParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SetMockConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMockConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SetMockConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.toyota.ctp.v1.LogService/SetMockConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SetMockConfig(ctx, req.(*SetMockConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.toyota.ctp.v1.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogSettings",
			Handler:    _LogService_GetLogSettings_Handler,
		},
		{
			MethodName: "GetAttachmentParameters",
			Handler:    _LogService_GetAttachmentParameters_Handler,
		},
		{
			MethodName: "SetMockConfig",
			Handler:    _LogService_SetMockConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadLogMessages",
			Handler:       _LogService_UploadLogMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vehicle-logs-service-mock.proto",
}
